15655-PL6  IBM(R) Enterprise PL/I for z/OS  6.1      (Built:20220429)                           2024.06.18 15:26:49   Page     1
-                     Options Specified
0  Install:
0  Command: SOURCE,RULES(LAXDCL)
0  Line.File Process Statements
0     1.0    *PROCESS MAR(2,72,1);                                                   00001
0  Install:
15655-PL6  IBM(R) Enterprise PL/I for z/OS  /******************************************         2024.06.18 15:26:49   Page     2
0 Compiler Source
0    Line.File
0       2.0      /********************************************************************** 00002
        3.0      *                                                                     * 00002
        4.0      * SEGMENT NAME:                                                       * 00002
        5.0      *                                                                     * 00002
        6.0      *    PLEAREP -- PLI_EXECUTION_ANALYZER_REPORT                         * 00002
        7.0      *                                                                     * 00003
        8.0      *       THIS PROGRAM IS READS THE SAMPLER FILE GENERATED BY THE PLEA  * 00003
        9.0      *       PROGRAM AND GENERATES THE PERFORMANCE REPORTS. THE ONLY PARM  * 00003
       10.0      *       TO THIS PROGRAM IS TERM=Y WHICH FORMATS THE FILE TO BE EASIER * 00003
       11.0      *       TO READ FROM A TERMINAL (SDSF).  TERM=N FORMATS FOR A         * 00003
       12.0      *       HARDCOPY LISTING.                                             * 00003
       13.0      *                                                                     * 00008
       14.0      * NOTES:                                                              * 00008
       15.0      *                                                                     * 00008
       16.0      *    1. ISSUE HISTORY:                                                * 00008
       17.0      *                                                                     * 00009
       18.0      *       REASON FOR ISSUE 02:                                          * 00009
       19.0      *       MODIFY HEADINGS TO READ EASIER FROM SDSF                      * 00010
       20.0      *                                                                     * 00011
       21.0      *       REASON FOR ISSUE 03:                                          * 00011
       22.0      *       ADD EXTNAME FIELD                                             * 00012
       23.0      *                                                                     * 00013
       24.0      *       REASON FOR ISSUE 04:                                          * 00013
       25.0      *       HANDLE CASE WHERE TRAILER RECORD IS MISSING.                  * 00014
       26.0      *                                                                     * 00015
       27.0      *       REASON FOR ISSUE 05:                                          * 00015
       28.0      *       FIX TWO BUGS FOUND AND REPAIRED BY MIKE FERERO.  MISSING LAST * 00016
       29.0      *       LINE IN BLOCK AND PROC REPORTS.                               * 00016
       30.0      *                                                                     * 00018
       31.0      **********************************************************************/ 00018
       32.0
       33.0      PLEAREP:                                                                00019
       34.0         PROCEDURE(MAINPARM) OPTIONS(MAIN) REORDER;                           00020
       35.0         DECLARE  MAINPARM    VARYING CHAR(100);                              00021
       36.0
       37.0      /********************************************************************** 00022
       38.0      *                                                                     * 00022
       39.0      * STRUCTURE CUR$LOC IS THE STANDARD TRACE RECORD OUTPUT BY THE        * 00022
       40.0      * SAMPLER ROUTINE.                                                    * 00022
       41.0      *                                                                     * 00025
       42.0      * STRUCTURES LOC_HEADER AND LOC_TRAILER ARE OUTPUT BY THE SAMPLER     * 00025
       43.0      * ROUTINE AT THE START AND END OF THE DATA.                           * 00025
       44.0      *                                                                     * 00027
       45.0      **********************************************************************/ 00027
       46.0         DECLARE  1  CUR$LOC  BASED(C_PTR),                                   00028
       47.0                     2  STMT   CHAR(8)       INIT('        '),                00029
       48.0                     2  PROC   CHAR(31)      INIT('        '),                00030
       49.0                     2  EXT    CHAR(8)       INIT('        ');                00031
       50.0         DECLARE  C_PTR        POINTER AUTO INIT(NULL());                     00032
       51.0         DECLARE  1  LOC_HEADER   AUTO,                                       00033
       52.0                     2  STMT   CHAR(8)       INIT(' '),                       00034
       53.0                     2  HEADER CHAR(4)       INIT(' '),                       00035
       54.0                     2  LOAD   CHAR(8)       INIT(' '),                       00036
       55.0                     2  TYPE   CHAR(4)       INIT(' '),                       00037
       56.0                     2  INT    PIC'ZZZZZZ99' INIT(0),                         00038
       57.0                     2  SPARE  CHAR(15)        INIT(' ');                     00039
       58.0         DECLARE  1  LOC_TRAILER  AUTO,                                       00040
       59.0                     2  STMT    CHAR(8)         INIT(' '),                    00041
       60.0                     2  HEADER  CHAR(4)         INIT(' '),                    00042
       61.0                     2  SP1     CHAR(2)         INIT(' '),                    00043
       62.0                     2  COUNT   PIC'ZZZZZZZ9'   INIT(0),                      00044
       63.0                     2  MINUTES PIC'ZZZZZZZ9'   INIT(0),                      00045
       64.0                     2  STMTS   PIC'ZZZZZZZZ9'  INIT(0),                      00046
       65.0                     2  SPARE  CHAR(8)         INIT(' ');                     00047
       66.0                                                                              00048
       67.0         DECLARE  1  LOC_SUMMARY  BASED(L_PTR),                               00049
       68.0                     2  STMT   CHAR(8)       INIT('        '),                00050
       69.0                     2  PROC   CHAR(31)      INIT('        '),                00051
       70.0                     2  EXT    CHAR(8)       INIT('        '),                00052
       71.0                     2  COUNT  PIC'ZZZZZZZ9' INIT(0);                         00053
       72.0         DECLARE  L_PTR        POINTER AUTO INIT(NULL());                     00054
       73.0         DECLARE  1  PROC_SUMMARY  BASED(P_PTR),                              00055
       74.0                     2  STMT   CHAR(8)       INIT('        '),                00056
       75.0                     2  PROC   CHAR(31)      INIT('        '),                00057
       76.0                     2  EXT    CHAR(8)       INIT('        '),                00058
       77.0                     2  COUNT  PIC'ZZZZZZZ9' INIT(0);                         00059
       78.0         DECLARE  P_PTR        POINTER AUTO   INIT(NULL());                   00060
       79.0         DECLARE  REPORT       FILE PRINT;                                    00061
       80.0         DECLARE  PAGE#        PIC'ZZZ9' AUTO INIT(1);                        00062
       81.0         DECLARE  SYSPRINT     FILE PRINT;                                    00063
       82.0         DECLARE  TRACE$$      FILE RECORD INPUT  ENV(TOTAL,FB,RECSIZE(47));  00064
       83.0         DECLARE  WORKOUT      FILE RECORD OUTPUT ENV(TOTAL,FB,RECSIZE(55));  00065
       84.0         DECLARE  WORKOU2      FILE RECORD OUTPUT ENV(TOTAL,FB,RECSIZE(55));  00066
       85.0         DECLARE  WORKIN       FILE RECORD INPUT  ENV(TOTAL,FB,RECSIZE(55));  00067
       86.0         DECLARE  EOF_TRACE$$   BIT(1) ALIGNED STATIC INIT('0'B);             00068
       87.0         DECLARE  EOF_WORKIN    BIT(1) ALIGNED STATIC INIT('0'B);             00069
       88.0         DECLARE  TRACE_HEADER  CHAR(4) INIT('+++1');                         00070
       89.0         DECLARE  TRACE_TRAILER CHAR(4) INIT('+++2');                         00071
       90.0         DECLARE  TOTAL_INTERRUPTS FIXED BINARY(31) INIT(0);                  00072
       91.0         DECLARE  STARS         CHAR(100) STATIC INIT((100)'*');              00073
       92.0         DECLARE  STARS_80      CHAR(80)  STATIC INIT((80)'*');               00074
       93.0         DECLARE  TERM_FORMAT   BIT(1) ALIGNED AUTO INIT('0'B);               00075
       94.0         DECLARE  TRAILER_FOUND BIT(1) ALIGNED AUTO INIT('0'B);               00076
       95.0                                                                              00077
       96.0         TERM_FORMAT = INDEX(MAINPARM,'TERM=Y') > 0;                          00078
       97.0         OPEN FILE(SYSPRINT) TITLE('PLEAPRNT') OUTPUT;                        00079
       98.0         ON ENDFILE(TRACE$$) EOF_TRACE$$ = '1'B;                              00080
       99.0         ON ENDFILE(WORKIN)  EOF_WORKIN  = '1'B;                              00081
      100.0         OPEN FILE(REPORT)  STREAM OUTPUT;                                    00082
      101.0         CALL INITIAL_SORT_AND_HEADERS();                                     00083
      102.0         IF ^TRAILER_FOUND                                                    00084
      103.0         THEN                                                                 00085
      104.0            DO;                                                               00086
      105.0               PUT FILE(REPORT) SKIP(1)  EDIT(                                00087
      106.0                   'NO TRAILER RECORD FOUND, SAMPLING JOB PROBABLY ABENDED')  00088
      107.0                   (A);                                                       00089
      108.0               PUT FILE(REPORT) SKIP(1)  EDIT(                                00090
      109.0                   'NUMBER OF INTERRUPTS IS:      ',                          00091
      110.0                   TOTAL_INTERRUPTS)                                          00092
      111.0                   (A,X(5),F(11));                                            00093
      112.0            END;                                                              00094
      113.0         CALL PRODUCE_PROC_REPORT();                                          00095
      114.0         CALL PRODUCE_BLOCK_REPORT();                                         00096
      115.0         CALL PLIRETC(0);                                                     00097
      116.0         RETURN;                                                              00098
      117.0                                                                              00099
      118.0      INITIAL_SORT_AND_HEADERS:                                               00100
      119.0         PROCEDURE;                                                           00101
      120.0         DECLARE  RC           FIXED BINARY(31) AUTO INIT(0);                 00102
      121.0         OPEN FILE(TRACE$$) INPUT;                                            00103
      122.0         ON ENDPAGE(REPORT)                                                   00104
      123.0         BEGIN;                                                               00105
      124.0            IF PAGE# ^= 1                                                     00106
      125.0            THEN                                                              00107
      126.0               PUT FILE(REPORT) PAGE EDIT(                                    00108
      127.0               'BASIC STATISTICS',                                            00109
      128.0               'PAGE ',PAGE#)(A,COL(65),A,A);                                 00110
      129.0            ELSE                                                              00111
      130.0               DO;                                                            00112
      131.0                  PUT FILE(SYSPRINT) SKIP EDIT(                               00113
      132.0                      'PLEAREP - PL/I EXECUTION ANALYZER REPORT',             00114
      133.0                      'RELEASE 2.2 AS OF ',                                   00115
      134.0                       LINKDTE.LINK_DATE)(A,X(1),A,A);                        00116
      135.0                  IF TERM_FORMAT                                              00117
      136.0                  THEN                                                        00118
      137.0                     PUT FILE(REPORT) SKIP EDIT(                              00119
      138.0                         'BASIC STATISTICS')(A);                              00120
      139.0                  ELSE                                                        00121
      140.0                     PUT FILE(REPORT) SKIP EDIT(                              00122
      141.0                         'BASIC STATISTICS',                                  00123
      142.0                         'PAGE ',PAGE#)(A,COL(65),A,A);                       00124
      143.0               END;                                                           00125
      144.0            PUT FILE(REPORT) SKIP(2) LIST(' ');                               00126
      145.0            PAGE# = PAGE# + 1;                                                00127
      146.0         END;                                                                 00128
      147.0         OPEN FILE(WORKOUT) RECORD OUTPUT TITLE('WORK1'),                     00129
      148.0              FILE(WORKOU2) RECORD OUTPUT TITLE('WORK2'),                     00130
      149.0              FILE(TRACE$$) RECORD INPUT;                                     00131
      150.0         EOF_TRACE$$ = '0'B;                                                  00132
      151.0         SIGNAL ENDPAGE(REPORT);                                              00133
      152.0         ALLOCATE LOC_SUMMARY;                                                00134
      153.0         ALLOCATE PROC_SUMMARY;                                               00135
      154.0         CALL PLISRTD(' SORT FIELDS=(40,8,CH,A,9,31,CH,A,1,8,CH,A) ',         00136
      155.0                      ' RECORD TYPE=F,LENGTH=80 ',                            00137
      156.0                      3000000,                                                00138
      157.0                      RC,                                                     00139
      158.0                      SORT_INPUT,                                             00140
      159.0                      SORT_OUTPUT);                                           00141
      160.0         FREE LOC_SUMMARY;                                                    00142
      161.0         FREE PROC_SUMMARY;                                                   00143
      162.0         CLOSE FILE(WORKOUT),                                                 00144
      163.0               FILE(WORKOU2),                                                 00145
      164.0               FILE(TRACE$$);                                                 00146
      165.0         RETURN;                                                              00147
      166.0
      167.0      SORT_INPUT:                                                             00148
      168.0         PROCEDURE RETURNS(CHAR(80));                                         00149
      169.0         DECLARE  CARD            CHAR(80) BASED(C_PTR);                      00150
      170.0         DECLARE  BLANKS          CHAR(80) STATIC INIT(' ');                  00151
      171.0         DECLARE  FOXES           CHAR(80) STATIC INIT((80)'FF'X);            00152
      172.0         DECLARE  FOXES_DONE      BIT(1) ALIGNED STATIC INIT('0'B);           00153
      173.0         DECLARE  PROGRAM         CHAR(8)  STATIC INIT(' ');                  00154
      174.0         DECLARE  01 HEADER_OVLY  LIKE LOC_HEADER   BASED(C_PTR);             00155
      175.0         DECLARE  01 TRAILER_OVLY LIKE LOC_TRAILER  BASED(C_PTR);             00156
      176.0         DECLARE  GOT_RECORD      BIT(1) ALIGNED AUTO INIT('0'B);             00157
      177.0                                                                              00158
      178.0         READ FILE(TRACE$$) SET(C_PTR);                                       00159
      179.0         DO UNTIL(GOT_RECORD);                                                00160
      180.0            /**************************************************************   00161
      181.0            *                                                                 00162
      182.0            *   CHECK IF WE HAVE REACHED EOF ON THE INPUT FILE.  IF SO        00163
      183.0            *   ADD ONE MORE RECORD OF ALL X'FF'.  IF THAT RECORD HAS         00164
      184.0            *   ALREADY BEEN OUTPUT. TELL SORT THAT WE ARE DONE.              00165
      185.0            *                                                                 00166
      186.0            **************************************************************/   00167
      187.0            IF EOF_TRACE$$                                                    00168
      188.0            THEN                                                              00169
      189.0               DO;                                                            00170
      190.0                  IF FOXES_DONE                                               00171
      191.0                  THEN                                                        00172
      192.0                     DO;                                                      00173
      193.0                        CALL PLIRETC(8);/* SHOW LAST RECORD ALREADY PASSED */ 00174
      194.0                        C_PTR = ADDR(BLANKS);                                 00175
      195.0                        GOT_RECORD = '1'B;                                    00176
      196.0                     END;                                                     00177
      197.0                  ELSE                                                        00178
      198.0                     DO;                                                      00179
      199.0                        CALL PLIRETC(12); /* SHOW PASSING RECORD */           00180
      200.0                        C_PTR = ADDR(FOXES);                                  00181
      201.0                        GOT_RECORD = '1'B;                                    00182
      202.0                        FOXES_DONE = '1'B;                                    00183
      203.0                     END;                                                     00184
      204.0               END;                                                           00185
      205.0            ELSE                                                              00186
      206.0               DO;                                                            00187
      207.0                  /********************************************************   00188
      208.0                  *                                                           00189
      209.0                  *   HANDLE THE RECORD JUST READ.                            00190
      210.0                  *   RIGHT ADJUST THE STATEMENT NUMBER SO IT SORTS           00191
      211.0                  *   CORRECTLY.                                              00192
      212.0                  *                                                           00193
      213.0                  ********************************************************/   00194
      214.0                  CUR$LOC.STMT = RIGHT_ADJUST(CUR$LOC.STMT,8);                00195
      215.0                  /********************************************************   00196
      216.0                  *                                                           00197
      217.0                  *   CHECK FOR THE HEADER RECORD.  IF IT IS FOUND            00198
      218.0                  *   SAVE THE DATA FROM IT AND ALSO OUTPUT THE DATA TO       00199
      219.0                  *   THE REPORT.  DO NOT PASS THIS RECORD TO SORT.           00200
      220.0                  *                                                           00201
      221.0                  ********************************************************/   00202
      222.0                  IF SUBSTR(CUR$LOC.PROC,1,4) = TRACE_HEADER                  00203
      223.0                  THEN                                                        00204
      224.0                     DO;                                                      00205
      225.0                        LOC_HEADER = HEADER_OVLY;                             00206
      226.0                        PROGRAM = HEADER_OVLY.LOAD;                           00207
      227.0                        PUT FILE(REPORT) SKIP EDIT(                           00208
      228.0                            'NAME OF LOAD MODULE IS:       ',                 00209
      229.0                             RIGHT_ADJUST(HEADER_OVLY.LOAD,8))(A,X(5),A);     00210
      230.0                        PUT FILE(REPORT) SKIP EDIT(                           00211
      231.0                            'INTERRUPT INTERVAL IS:       ',                  00212
      232.0                            SUBSTR(HEADER_OVLY.INT,1,6),'.',                  00213
      233.0                            SUBSTR(HEADER_OVLY.INT,7,2),                      00214
      234.0                            ' SECONDS')                                       00215
      235.0                            (A,X(5),A,A,A,A);                                 00216
      236.0                        IF HEADER_OVLY.TYPE = 'REAL'                          00217
      237.0                        THEN                                                  00218
      238.0                           PUT FILE(REPORT) SKIP                              00219
      239.0                               LIST('INTERRUPTS BASED ON WALL TIME.');        00220
      240.0                        ELSE                                                  00221
      241.0                           PUT FILE(REPORT) SKIP                              00222
      242.0                               LIST('INTERRUPTS BASED ON TASK CPU TIME.');    00223
      243.0                     END;                                                     00224
      244.0                  ELSE                                                        00225
      245.0                     /*****************************************************   00226
      246.0                     *                                                        00227
      247.0                     *   CHECK FOR THE TRAILER RECORD.  IF IT IS FOUND        00228
      248.0                     *   SAVE THE DATA FROM IT AND ALSO OUTPUT THE DATA TO    00229
      249.0                     *   THE REPORT.  DO NOT PASS THIS RECORD TO SORT.        00230
      250.0                     *                                                        00231
      251.0                     *****************************************************/   00232
      252.0                     IF SUBSTR(CUR$LOC.PROC,1,4) = TRACE_TRAILER              00233
      253.0                     THEN                                                     00234
      254.0                        DO;                                                   00235
      255.0                           LOC_TRAILER = TRAILER_OVLY;                        00236
      256.0                           TRAILER_FOUND = '1'B;                              00237
      257.0                           PUT FILE(REPORT) SKIP(1)  EDIT(                    00238
      258.0                               'NUMBER OF INTERRUPTS IS:      ',              00239
      259.0                               TRAILER_OVLY.COUNT)                            00240
      260.0                               (A,X(5),A);                                    00241
      261.0                           PUT FILE(REPORT) SKIP(1)  EDIT(                    00242
      262.0                               'NUMBER OF PLI STATEMENTS IS: ',               00243
      263.0                               TRAILER_OVLY.STMTS)                            00244
      264.0                               (A,X(5),A);                                    00245
      265.0                           PUT FILE(REPORT) SKIP(1) EDIT(                     00246
      266.0                               'ELAPSED TIME FOR SAMPLING RUN:',              00247
      267.0                               TRAILER_OVLY.MINUTES,' MINUTE(S)')             00248
      268.0                               (A,X(5),A,A);                                  00249
      269.0                           PUT FILE(REPORT) SKIP(1) LIST(' ');                00250
      270.0                           GET STRING(TRAILER_OVLY.COUNT)                     00251
      271.0                               LIST(TOTAL_INTERRUPTS);                        00252
      272.0                        END;                                                  00253
      273.0                     ELSE                                                     00254
      274.0                        GOT_RECORD = '1'B;                                    00255
      275.0                  /********************************************************   00256
      276.0                  *                                                           00257
      277.0                  *   ALL RECORDS GET TO HERE.  IF THIS WAS A HEADER OR       00258
      278.0                  *   TRAILER RECORD, WE WILL READ ANOTHER.  OTHERWISE        00259
      279.0                  *   WE WILL TELL SORT WE ARE PASSING A RECORD VIA           00260
      280.0                  *   PLIRETV.                                                00261
      281.0                  *                                                           00262
      282.0                  ********************************************************/   00263
      283.0                  IF CUR$LOC.PROC = '*'                                       00264
      284.0                  THEN                                                        00265
      285.0                     CUR$LOC.PROC = PROGRAM;                                  00266
      286.0                  IF (GOT_RECORD)                                             00267
      287.0                  THEN                                                        00268
      288.0                     CALL PLIRETC(12); /* SHOW PASSING RECORD */              00269
      289.0                  ELSE                                                        00270
      290.0                     READ FILE(TRACE$$) SET(C_PTR);                           00271
      291.0               END; /* NOT EOF */                                             00272
      292.0         END; /* END OF DO WHILE LOOP */                                      00273
      293.0                                                                              00274
      294.0         RETURN(CARD);                                                        00275
      295.0      END SORT_INPUT;                                                         00276
      296.0                                                                              00277
      297.0      /********************************************************************** 00278
      298.0      *                                                                     * 00278
      299.0      * SEGMENT NAME:                                                       * 00278
      300.0      *                                                                     * 00278
      301.0      *    SORT_OUTPUT -- PROCESS SORTED TRACE RECORDS                      * 00278
      302.0      *                                                                     * 00299
      303.0      * INPUTS (*TO FUNCTIONS):                                             * 00299
      304.0      *                                                                     * 00279
      305.0      *    CARD -- SORTED TRACE RECORD (*1,3,4)                             * 00279
      306.0      *       THE SORTED TRACE RECORDS, SORTED BY SORT AND CONSTRUCTED BY   * 00280
      307.0      *       THE SORT INPUT ROUTINE ARE PASSED TO THIS ROUTINE ONE AT AT   * 00280
      308.0      *       TIME.  THERE IS A TRAILER RECORD OF ALL X'FF' WHICH IS PASSED * 00280
      309.0      *       IN BUT NOT OUTPUT.                                            * 00280
      310.0      *                                                                     * 00298
      311.0      * FUNCTIONS:                                                          * 00298
      312.0      *                                                                     * 00298
      313.0      *    1. OVERLAY THE TRACE RECORD WITH THE STRUCTURE OVERLAY           * 00298
      314.0      *                                                                     * 00300
      315.0      *    2. IF THERE IS NO TRAILER RECORD, COUNT THE TRAP RECORD.         * 00300
      316.0      *                                                                     * 00302
      317.0      *    3. IF THIS TRACE RECORD IS FOR THE SAME STATEMENT AS THE         * 00302
      318.0      *       PREVIOUS ONE, BUMP THE TRAP COUNT IN THE STATEMENT SUMMARY.   * 00302
      319.0      *       IF THIS IS FOR A DIFFERENT STATEMENT, OUTPUT THE OLD RECORD   * 00302
      320.0      *       AND START A NEW ONE.                                          * 00302
      321.0      *                                                                     * 00308
      322.0      *    4. IF THIS TRACE RECORD IS FOR THE SAME PROCEDURE AS THE         * 00308
      323.0      *       PREVIOUS ONE, BUMP THE TRAP COUNT IN THE PROCEDURE SUMMARY.   * 00308
      324.0      *       IF THIS IS FOR A DIFFERENT PROCEDURE, OUTPUT THE OLD RECORD   * 00308
      325.0      *       AND START A NEW ONE.                                          * 00308
      326.0      *                                                                     * 00301
      327.0      * OUTPUTS (*FROM FUNCTIONS):                                          * 00301
      328.0      *                                                                     * 00292
      329.0      *    TRAILER_FOUND -- GLOBAL FLAG (*2)                                * 00292
      330.0      *       THE TRAILER FOUND FLAG IS SET BY THE SORT_INPUT ROUTINE WHEN  * 00293
      331.0      *       THE TRAILER RECORD IS ENCOUNTERED.  WHEN THE RECORD IS NOT    * 00293
      332.0      *       FOUND, WE WANT TO COUNT THE TOTAL NUMBER OF INTERUPTS         * 00293
      333.0      *       OURSELVES.                                                    * 00293
      334.0      *                                                                     * 00288
      335.0      *    WORKOUT -- WORK FILE DD (DDNAME = WORK2) (*3)                    * 00288
      336.0      *       INTO THIS WORK FILE IS PLACED THE STATMENT SUMMARY RECORDS.   * 00289
      337.0      *       THESE RECORDS ARE GENERATED ONE PER STATEMENT WITH A COUNT OF * 00289
      338.0      *       ALL THE TRAPS WHICH OCCURED IN THAT STATEMENT.                * 00289
      339.0      *                                                                     * 00284
      340.0      *    WORKOU2 -- WORK FILE DD (DDNAME = WORK1) (*4)                    * 00284
      341.0      *       INTO THIS WORK FILE IS PLACED THE PROCEDURE SUMMARY RECORDS.  * 00285
      342.0      *       THESE RECORDS ARE GENERATED ONE PER PROCEDURE WITH A COUNT OF * 00285
      343.0      *       ALL THE TRAPS WHICH OCCURED IN THAT PROCEDURE.                * 00285
      344.0      *                                                                     * 00314
      345.0      **********************************************************************/ 00314
      346.0
      347.0      SORT_OUTPUT:                                                            00315
      348.0         PROCEDURE(CARD);                                                     00316
      349.0         DECLARE  CARD    CHAR(80);                                           00317
      350.0         DECLARE  LOC_STMT_COUNT   FIXED BINARY(31) STATIC INIT(0);           00318
      351.0         DECLARE  PROC_STMT_COUNT  FIXED BINARY(31) STATIC INIT(0);           00319
      352.0                                                                              00320
      353.0         C_PTR = ADDR(CARD);                                                  00321
      354.0         IF ^TRAILER_FOUND                                                    00322
      355.0         THEN                                                                 00323
      356.0            TOTAL_INTERRUPTS = TOTAL_INTERRUPTS + 1;                          00324
      357.0                                                                              00325
      358.0         /**************************************************************      00326
      359.0         *                                                                    00327
      360.0         *   COLLECT DATA INTO THE STATEMENT SUMMARY RECORD.  WHEN            00328
      361.0         *   THE STATEMENTS CHANGE, OUTPUT THE OLD RECORD AND START           00329
      362.0         *   A NEW ONE.  DO NOT OUTPUT THE INITIAL BLANK RECORD.              00330
      363.0         *                                                                    00331
      364.0         **************************************************************/      00332
      365.0         IF CUR$LOC.STMT  ^= LOC_SUMMARY.STMT |                               00333
      366.0            CUR$LOC.PROC  ^= LOC_SUMMARY.PROC |                               00334
      367.0            CUR$LOC.EXT   ^= LOC_SUMMARY.EXT                                  00335
      368.0         THEN                                                                 00336
      369.0            DO;                                                               00337
      370.0               IF LOC_SUMMARY.PROC  ^= ' '                                    00338
      371.0               THEN                                                           00339
      372.0                  DO;                                                         00340
      373.0                     LOC_SUMMARY.COUNT = LOC_STMT_COUNT;                      00341
      374.0                     WRITE FILE(WORKOUT) FROM(LOC_SUMMARY);                   00342
      375.0                  END;                                                        00343
      376.0               LOC_SUMMARY.STMT  = CUR$LOC.STMT;                              00344
      377.0               LOC_SUMMARY.PROC  = CUR$LOC.PROC;                              00345
      378.0               LOC_SUMMARY.EXT   = CUR$LOC.EXT;                               00346
      379.0               LOC_STMT_COUNT = 1;                                            00347
      380.0            END;                                                              00348
      381.0         ELSE                                                                 00349
      382.0            LOC_STMT_COUNT = LOC_STMT_COUNT + 1;                              00350
      383.0                                                                              00351
      384.0         /**************************************************************      00352
      385.0         *                                                                    00353
      386.0         *   COLLECT DATA INTO THE PROCEDURE SUMMARY RECORD.  WHEN            00354
      387.0         *   THE PROCEDURES CHANGE, OUTPUT THE OLD RECORD AND START           00355
      388.0         *   A NEW ONE.  DO NOT OUTPUT THE INITIAL BLANK RECORD.              00356
      389.0         *                                                                    00357
      390.0         **************************************************************/      00358
      391.0         IF CUR$LOC.PROC  ^= PROC_SUMMARY.PROC  |                             00359
      392.0            CUR$LOC.EXT   ^= PROC_SUMMARY.EXT                                 00360
      393.0         THEN                                                                 00361
      394.0            DO;                                                               00362
      395.0               IF PROC_SUMMARY.PROC ^= ' '                                    00363
      396.0               THEN                                                           00364
      397.0                  DO;                                                         00365
      398.0                     PROC_SUMMARY.COUNT = PROC_STMT_COUNT;                    00366
      399.0                     WRITE FILE(WORKOU2) FROM(PROC_SUMMARY);                  00367
      400.0                  END;                                                        00368
      401.0               PROC_SUMMARY.STMT  = ' ';                                      00369
      402.0               PROC_SUMMARY.PROC  = CUR$LOC.PROC;                             00370
      403.0               PROC_SUMMARY.EXT   = CUR$LOC.EXT;                              00371
      404.0               PROC_STMT_COUNT = 1;                                           00372
      405.0            END;                                                              00373
      406.0         ELSE                                                                 00374
      407.0            PROC_STMT_COUNT = PROC_STMT_COUNT + 1;                            00375
      408.0
      409.0      END SORT_OUTPUT;                                                        00376
      410.0      END INITIAL_SORT_AND_HEADERS;                                           00377
      411.0                                                                              00378
      412.0      PRODUCE_PROC_REPORT:                                                    00379
      413.0         PROCEDURE;                                                           00380
      414.0         DECLARE  RC           FIXED BINARY(31) AUTO;                         00381
      415.0         DECLARE  LAST_PROC    CHAR(08) AUTO INIT(' ');                       00382
      416.0         DECLARE  INT_COUNT    FIXED BINARY(31) AUTO INIT(0);                 00383
      417.0         DECLARE  PERCENT      FIXED BINARY(31) AUTO INIT(0);                 00384
      418.0         DECLARE  PERCENT_PIC  PIC'ZZZZZZ9.9'   AUTO;                         00385
      419.0         DECLARE  FIRST_PAGE   BIT(1) AUTO ALIGNED INIT('1'B);                00386
      420.0         DECLARE  PROC_WORK1   VARYING CHAR(31) AUTO;                         00387
      421.0         DECLARE  PROC_WORK2           CHAR(31) AUTO;                         00388
      422.0                                                                              00389
      423.0         ON ENDPAGE(REPORT)                                                   00390
      424.0         BEGIN;                                                               00391
      425.0            IF TERM_FORMAT                                                    00392
      426.0            THEN                                                              00393
      427.0               DO;                                                            00394
      428.0                  IF FIRST_PAGE                                               00395
      429.0                  THEN                                                        00396
      430.0                     DO;                                                      00397
      431.0                        PUT FILE(REPORT) PAGE LIST(STARS_80);                 00398
      432.0                        PUT FILE(REPORT) SKIP EDIT(                           00399
      433.0                            'SUMMARY OF TIME SPENT IN EACH PROC FOR PGM ',    00400
      434.0                            LOC_HEADER.LOAD)                                  00401
      435.0                            (A);                                              00402
      436.0                        PUT FILE(REPORT) SKIP LIST(' ');                      00403
      437.0                        PUT FILE(REPORT) SKIP LIST(STARS_80);                 00404
      438.0                        PUT FILE(REPORT) SKIP EDIT(                           00405
      439.0                           'PROC       TRAP COUNT  %TOTAL ',                  00406
      440.0                           'TOTAL PERCENTAGE GRAPH,  * = 1%')(A,COL(50),A);   00407
      441.0                        PUT FILE(REPORT) SKIP LIST(' ');                      00408
      442.0                     END;                                                     00409
      443.0                  FIRST_PAGE = '0'B;                                          00410
      444.0               END;                                                           00411
      445.0            ELSE                                                              00412
      446.0               DO;                                                            00413
      447.0                  IF PAGE# ^= 1                                               00414
      448.0                  THEN                                                        00415
      449.0                     PUT FILE(REPORT) PAGE EDIT(                              00416
      450.0                     'SUMMARY OF TIME SPENT IN EACH PROC FOR PGM ',           00417
      451.0                      LOC_HEADER.LOAD,                                        00418
      452.0                     'PAGE ',PAGE#)(A,A,COL(65),A,A);                         00419
      453.0                  ELSE                                                        00420
      454.0                     PUT FILE(REPORT) SKIP EDIT(                              00421
      455.0                     'SUMMARY OF TIME SPENT IN EACH PROC FOR PGM ',           00422
      456.0                      LOC_HEADER.LOAD,                                        00423
      457.0                     'PAGE ',PAGE#)(A,A,COL(65),A,A);                         00424
      458.0                  PUT FILE(REPORT) SKIP LIST(' ');                            00425
      459.0                  PUT FILE(REPORT) SKIP EDIT(                                 00426
      460.0                     'PROC       TRAP COUNT  %TOTAL ',                        00427
      461.0                     'TOTAL PERCENTAGE GRAPH,  * = 1%')(A,COL(50),A);         00428
      462.0                  PUT FILE(REPORT) SKIP LIST(' ');                            00429
      463.0               END;                                                           00430
      464.0            PAGE# = PAGE# + 1;                                                00431
      465.0         END; /* END OF ENDPAGE UNIT */                                       00432
      466.0                                                                              00433
      467.0         OPEN FILE(WORKIN) RECORD INPUT TITLE('WORK2');                       00434
      468.0         EOF_WORKIN = '0'B;                                                   00435
      469.0         READ FILE(WORKIN) SET(P_PTR);                                        00436
      470.0                                                                              00437
      471.0         SIGNAL ENDPAGE(REPORT);                                              00438
      472.0                                                                              00439
      473.0         DO WHILE(^EOF_WORKIN);                                               00440
      474.0            PERCENT = (1000 * PROC_SUMMARY.COUNT) / TOTAL_INTERRUPTS;         00441
      475.0            PERCENT_PIC = PERCENT;                                            00442
      476.0            PROC_WORK1 = TRIMX(PROC_SUMMARY.PROC);                            00443
      477.0            PROC_WORK2 = PROC_WORK1 || '(' || TRIMX(PROC_SUMMARY.EXT) || ')'; 00444
      478.0            PUT FILE(REPORT) SKIP EDIT(PROC_WORK2,                            00445
      479.0                                       PROC_SUMMARY.COUNT,                    00446
      480.0                                       PERCENT_PIC,                           00447
      481.0                                       SUBSTR(STARS,1,((PERCENT+5)/10)))      00448
      482.0                                  (A,X(1),A,A,X(1),A);                        00449
      483.0            READ FILE(WORKIN) SET(P_PTR);                                     00450
      484.0         END;                                                                 00451
      485.0                                                                              00452
      486.0         CLOSE FILE(WORKIN);                                                  00453
      487.0         PUT FILE(REPORT) SKIP LIST(' ');                                     00454
      488.0
      489.0      END PRODUCE_PROC_REPORT;                                                00455
      490.0
      491.0
      492.0      PRODUCE_BLOCK_REPORT:                                                   00456
      493.0         PROCEDURE;                                                           00457
      494.0         DECLARE  RC           FIXED BINARY(31) AUTO;                         00458
      495.0         DECLARE  LAST_PROC    CHAR(31) AUTO INIT(' ');                       00459
      496.0         DECLARE  LAST_EXT     CHAR(8)  AUTO INIT(' ');                       00460
      497.0         DECLARE  INT_COUNT    FIXED BINARY(31) AUTO INIT(0);                 00461
      498.0         DECLARE  PERCENT      FIXED BINARY(31) AUTO INIT(0);                 00462
      499.0         DECLARE  PERCENT_PIC  PIC'ZZZZZZ9.9'   AUTO;                         00463
      500.0         DECLARE  FIRST_PAGE   BIT(1) AUTO ALIGNED INIT('1'B);                00464
      501.0                                                                              00465
      502.0         ON ENDPAGE(REPORT)                                                   00466
      503.0         BEGIN;                                                               00467
      504.0            IF TERM_FORMAT                                                    00468
      505.0            THEN                                                              00469
      506.0               DO;                                                            00470
      507.0                  IF FIRST_PAGE                                               00471
      508.0                  THEN                                                        00472
      509.0                     DO;                                                      00473
      510.0                        PUT FILE(REPORT) PAGE LIST(STARS_80);                 00474
      511.0                        PUT FILE(REPORT) SKIP EDIT(                           00475
      512.0                            'TIME SPENT IN STATEMENTS, BY PROC FOR PGM ',     00476
      513.0                            LOC_HEADER.LOAD)                                  00477
      514.0                            (A);                                              00478
      515.0                     END;                                                     00479
      516.0                  PUT FILE(REPORT) SKIP LIST(' ');                            00480
      517.0                  PUT FILE(REPORT) SKIP LIST(STARS_80);                       00481
      518.0                  FIRST_PAGE = '0'B;                                          00482
      519.0               END;                                                           00483
      520.0            ELSE                                                              00484
      521.0               DO;                                                            00485
      522.0                  IF PAGE# ^= 1                                               00486
      523.0                  THEN                                                        00487
      524.0                     PUT FILE(REPORT) PAGE EDIT(                              00488
      525.0                     'TIME SPENT IN STATEMENTS, BY PROC FOR PGM ',            00489
      526.0                     LOC_HEADER.LOAD,                                         00490
      527.0                     'PAGE ',PAGE#)(A,A,A,COL(65),A,A);                       00491
      528.0                  ELSE                                                        00492
      529.0                     PUT FILE(REPORT) SKIP EDIT(                              00493
      530.0                     'TIME SPENT IN STATEMENTS, BY PROC FOR PGM ',            00494
      531.0                     LOC_HEADER.LOAD,                                         00495
      532.0                     'PAGE ',PAGE#)(A,A,A,COL(65),A,A);                       00496
      533.0                  PUT FILE(REPORT) SKIP LIST(' ');                            00497
      534.0               END;                                                           00498
      535.0            PUT FILE(REPORT) SKIP EDIT('PROC ',                               00499
      536.0               TRIMX(LOC_SUMMARY.PROC),                                       00500
      537.0               ' IN EXTERNAL PROC ',LOC_SUMMARY.EXT)(A);                      00501
      538.0            PUT FILE(REPORT) SKIP LIST(' ');                                  00502
      539.0            PUT FILE(REPORT) SKIP EDIT(                                       00503
      540.0               'STATEMENT  TRAP COUNT  %TOTAL ',                              00504
      541.0               'TOTAL PERCENTAGE GRAPH,  * = 1%')(A,COL(50),A);               00505
      542.0            PUT FILE(REPORT) SKIP LIST(' ');                                  00506
      543.0            PAGE# = PAGE# + 1;                                                00507
      544.0         END; /* ENDPAGE UNIT */                                              00508
      545.0                                                                              00509
      546.0         OPEN FILE(WORKIN) RECORD INPUT TITLE('WORK1');                       00510
      547.0         EOF_WORKIN = '0'B;                                                   00511
      548.0         READ FILE(WORKIN) SET(L_PTR);                                        00512
      549.0                                                                              00513
      550.0         DO WHILE(^EOF_WORKIN);                                               00514
      551.0            IF LAST_PROC ^= LOC_SUMMARY.PROC                                  00515
      552.0            THEN                                                              00516
      553.0               DO;                                                            00517
      554.0                  IF LAST_PROC ^= ' '                                         00518
      555.0                  THEN                                                        00519
      556.0                     DO;                                                      00520
      557.0                        PERCENT = (1000 * INT_COUNT) / TOTAL_INTERRUPTS;      00521
      558.0                        PUT FILE(REPORT) SKIP LIST(' ');                      00522
      559.0                        PUT FILE(REPORT) SKIP EDIT(                           00523
      560.0                            'TOTAL INTERRUPTS THIS PROC: ',INT_COUNT)         00524
      561.0                            (A,F(8));                                         00525
      562.0                        PERCENT_PIC = PERCENT;                                00526
      563.0                        PUT FILE(REPORT) SKIP EDIT(                           00527
      564.0                            'THIS PROC CONSUMED ',PERCENT_PIC,                00528
      565.0                            ' OF THE TOTAL CPU TIME')(A);                     00529
      566.0                        PUT FILE(REPORT) SKIP LIST(' ');                      00530
      567.0                     END;                                                     00531
      568.0                  SIGNAL ENDPAGE(REPORT);                                     00532
      569.0                  INT_COUNT = 0;                                              00533
      570.0                  LAST_PROC = LOC_SUMMARY.PROC;                               00534
      571.0                  LAST_EXT  = LOC_SUMMARY.EXT;                                00535
      572.0               END;                                                           00536
      573.0                                                                              00537
      574.0            PERCENT = (1000 * LOC_SUMMARY.COUNT) / TOTAL_INTERRUPTS;          00538
      575.0            PERCENT_PIC = PERCENT;                                            00539
      576.0            PUT FILE(REPORT) SKIP EDIT(LOC_SUMMARY.STMT,                      00540
      577.0                                       LOC_SUMMARY.COUNT,                     00541
      578.0                                       PERCENT_PIC,                           00542
      579.0                                       SUBSTR(STARS,1,((PERCENT+5)/10)))      00543
      580.0                                  (A,X(4),A,A,COL(36),A);                     00544
      581.0            INT_COUNT = INT_COUNT + LOC_SUMMARY.COUNT;                        00545
      582.0            READ FILE(WORKIN) SET(L_PTR);                                     00546
      583.0         END;                                                                 00547
      584.0         IF LAST_PROC ^= ' '                                                  00548
      585.0         THEN                                                                 00549
      586.0            DO;                                                               00550
      587.0               PERCENT = (1000 * INT_COUNT) / TOTAL_INTERRUPTS;               00551
      588.0               PUT FILE(REPORT) SKIP LIST(' ');                               00552
      589.0               PUT FILE(REPORT) SKIP EDIT(                                    00553
      590.0                   'TOTAL INTERRUPTS THIS PROC: ',INT_COUNT)                  00554
      591.0                   (A,F(8));                                                  00555
      592.0               PERCENT_PIC = PERCENT;                                         00556
      593.0               PUT FILE(REPORT) SKIP EDIT(                                    00557
      594.0                   'THIS PROC CONSUMED ',PERCENT_PIC,                         00558
      595.0                   ' OF THE TOTAL CPU TIME')(A);                              00559
      596.0               PUT FILE(REPORT) SKIP LIST(' ');                               00560
      597.0            END;                                                              00561
      598.0         CLOSE FILE(WORKIN);                                                  00562
      599.0
      600.0      END PRODUCE_BLOCK_REPORT;                                               00563
      601.0
      602.0
      603.0                                                                              00564
      604.0      /********************************************************************** 00565
      605.0      *                                                                     * 00565
      606.0      * SEGMENT NAME:                                                       * 00565
      607.0      *                                                                     * 00565
      608.0      *    RIGHT_ADJUST -- RIGHT ADJUST A STRING WITHIN A FIXED LENGTH      * 00565
      609.0      *       FIELD.                                                        * 00565
      610.0      *                                                                     * 00578
      611.0      * INPUTS (*TO FUNCTIONS):                                             * 00578
      612.0      *                                                                     * 00566
      613.0      *    STRING -- INPUT STRING TO BE ADJUSTED (*1,2,3)                   * 00566
      614.0      *       THE FIRST PARM TO THIS ROUTINE IS A STRING WHICH IS TO BE     * 00567
      615.0      *       RIGHT ADJUSTED.                                               * 00567
      616.0      *                                                                     * 00569
      617.0      *    LEN -- LENGTH OF THE FIXED LENGTH FIELD (*2,3)                   * 00569
      618.0      *       THE LENGTH OF THE FIELD INTO WHICH THE PASSED STRING IS TO BE * 00570
      619.0      *       ADJUSTED IS THE SECOND PARM TO THIS STRING.                   * 00570
      620.0      *                                                                     * 00577
      621.0      * FUNCTIONS:                                                          * 00577
      622.0      *                                                                     * 00577
      623.0      *    1. TRIM LEADING AND TRAILING BLANKS OFF THE INPUT STRING         * 00577
      624.0      *                                                                     * 00579
      625.0      *    2. IF THE STRING IS LONGER THAN THE FIELD LENGTH, TRUNCATE IT TO * 00579
      626.0      *       THIS LENGTH.                                                  * 00579
      627.0      *                                                                     * 00584
      628.0      *    3. PAD THE INPUT STRING ON THE LEFT WITH ENOUGH BLANKS TO MAKE   * 00584
      629.0      *       IT THE LENGTH SPECIFIED IN THE LENGTH PARMATER.               * 00584
      630.0      *                                                                     * 00583
      631.0      * OUTPUTS (*FROM FUNCTIONS):                                          * 00583
      632.0      *                                                                     * 00572
      633.0      *    RET -- RETURNED STRING (*2,3)                                    * 00572
      634.0      *       THE RETURNED VALUE OF THIS FUNCTION IS THE INPUT STRING       * 00573
      635.0      *       PADDED ON THE LEFT WITH BLANKS TO THE LENGTH INIDICATED IN    * 00573
      636.0      *       THE LENGTH PARM.                                              * 00573
      637.0      *                                                                     * 00589
      638.0      **********************************************************************/ 00589
      639.0
      640.0      RIGHT_ADJUST:                                                           00590
      641.0         PROCEDURE(STRING,LEN) RETURNS(VARYING CHAR(80));                     00591
      642.0         DECLARE  STRING   CHAR(*);                                           00592
      643.0         DECLARE  LEN      FIXED BINARY(15);                                  00593
      644.0         DECLARE  WORK     VARYING CHAR(80) AUTO;                             00594
      645.0         DECLARE  BLANKS   CHAR(80) INIT(' ');                                00595
      646.0         DECLARE  I        FIXED BINARY(15) AUTO;                             00596
      647.0         WORK = TRIMX((STRING));                                              00597
      648.0         IF LENGTH(WORK) >= LEN                                               00598
      649.0         THEN                                                                 00599
      650.0            WORK = SUBSTR(WORK,1,LEN);                                        00600
      651.0         ELSE                                                                 00601
      652.0            WORK = SUBSTR(BLANKS,1,LEN-LENGTH(WORK)) || WORK;                 00602
      653.0         RETURN(WORK);                                                        00603
      654.0      END RIGHT_ADJUST;                                                       00604
      655.0                                                                              00605
      656.0
      657.0      /********************************************************************** 00606
      658.0      *                                                                     * 00606
      659.0      * SEGMENT NAME:                                                       * 00606
      660.0      *                                                                     * 00606
      661.0      *    TRIM -- SEGMENTS TRIM AND TRIMX                                  * 00606
      662.0      *                                                                     * 00611
      663.0      * INPUTS (*TO FUNCTIONS):                                             * 00611
      664.0      *                                                                     * 00607
      665.0      *    FIX_STR -- INPUT STRING (*1,2)                                   * 00607
      666.0      *                                                                     * 00609
      667.0      * FUNCTIONS:                                                          * 00609
      668.0      *                                                                     * 00609
      669.0      *    1. FUNCTION TRIM REMOVES TRAILING BLANKS ASSUMING THAT THE DATA  * 00609
      670.0      *       IS LEFT JUSTIFIED AND CONTAINS NO IMBEDDED BLANKS.            * 00609
      671.0      *                                                                     * 00613
      672.0      *    2. FUNCTION TRIMX REMOVES LEADING AND TRAILING BLANKS.  IMBEDDED * 00613
      673.0      *       BLANKS ARE ACCEPTABLE.                                        * 00613
      674.0      *                                                                     * 00612
      675.0      * OUTPUTS (*FROM FUNCTIONS):                                          * 00612
      676.0      *                                                                     * 00608
      677.0      *    OUT_STR -- RETURNED OUTPUT STRING (*1,2)                         * 00608
      678.0      *                                                                     * 00617
      679.0      **********************************************************************/ 00617
      680.0
      681.0      TRIM:                                                                   00618
      682.0         PROCEDURE(FIX_STR) RETURNS(VARYING CHAR(80));                        00619
      683.0       DECLARE FIX_STR  CHAR(*);                                              00620
      684.0       DECLARE I        FIXED BINARY(15) AUTO;                                00621
      685.0       I = INDEX(FIX_STR,' ');                                                00622
      686.0       IF I = 0                                                               00623
      687.0       THEN                                                                   00624
      688.0          RETURN(FIX_STR);                                                    00625
      689.0       ELSE                                                                   00626
      690.0          RETURN(SUBSTR(FIX_STR,1,I-1));                                      00627
      691.0      END TRIM;                                                               00628
      692.0
      693.0      TRIMX:                                                                  00629
      694.0       PROCEDURE(FIX_STR)  RETURNS(VARYING CHAR(256));                        00630
      695.0       DECLARE FIX_STR           CHAR(*);                                     00631
      696.0       DECLARE INSTR     VARYING CHAR(256) AUTO;                              00632
      697.0       DECLARE I         FIXED BIN(15);                                       00633
      698.0
      699.0      /********************************************************************** 00634
      700.0      *                                                                     * 00634
      701.0      * TRIM LEADING AND TRAILING BLANKS                                    * 00634
      702.0      *                                                                     * 00636
      703.0      **********************************************************************/ 00636
      704.0        INSTR = FIX_STR;                                                      00637
      705.0       I = VERIFY(INSTR,' ');                                                 00638
      706.0       IF  I = 0                                                              00639
      707.0       THEN                                                                   00640
      708.0          IF INDEX(INSTR,' ') = 0                                             00641
      709.0          THEN                                                                00642
      710.0             RETURN(INSTR);                                                   00643
      711.0          ELSE                                                                00644
      712.0             RETURN('');                                                      00645
      713.0       RETURN(SUBSTR(INSTR,I,LENGTH(INSTR) - (I-1) -                          00646
      714.0                     (VERIFY(REVERSE(INSTR),' ')-1)) );                       00647
      715.0
      716.0      END TRIMX;                                                              00648
      717.0
      718.0      /********************************************************************** 00001
      719.0      *                                                                     * 00002
      720.0      *                      SUBSET FG500299.ASETDCLS                       * 00002
      721.0      *                                                                     * 00003
      722.0      * MASTER LIST COMMON DECLARATIONS                                     * 00003
      723.0      *                                                                     * 00004
      724.0      * EXTERNAL VARIABLE SYSENV IS SET TO THE VALUE 'FORE' FOR FORGROUND   * 00004
      725.0      * OPERATION AND 'BACK' FOR BACKGROUND (BATCH JOB) OPERATION.  FOR     * 00004
      726.0      * INTERACTIVE SPF DIALOGS, THE VALUE 'SPF' CAN BE USED TO CAUSE THE   * 00004
      727.0      * ERROR ROUTINE TO FILL IN THE SPFMSGS ARRAY INSTEAD OF WRITING TO    * 00004
      728.0      * FILE PRINT.                                                         * 00004
      729.0      *                                                                     * 00009
      730.0      * EXTERNAL VARIABLE LOGONID IS ALWAYS INITIALIZED BY THE INITIALIZE   * 00009
      731.0      * ROUTINE TO THE CURRENT USERID.  IT IS USED IN OUT_ENT TO MARK THE   * 00009
      732.0      * USER WHO LAST UPDATED ANY PARTICULAR RECORD.                        * 00009
      733.0      *                                                                     * 00013
      734.0      * QUIET IS SET TO TRUE WHEN INFORMATORY MESSAGES ARE TO BE            * 00013
      735.0      * SUPPRESSED.                                                         * 00013
      736.0      *                                                                     * 00015
      737.0      **********************************************************************/ 00015
      738.0                                                                              00016
      739.0      DEFAULT RANGE(*) ALIGNED FIXED BINARY STATIC,                           00017
      740.0                       DESCRIPTORS ALIGNED;                                   00018
      741.0                                                                              00019
      742.0
      743.0      /********************************************************************** 00001
      744.0      *                                                                     * 00001
      745.0      *                       SUBSET FG500299.BUILTIN                       * 00001
      746.0      *                                                                     * 00002
      747.0      *                                                                     * 00003
      748.0      *                       BUILTIN PL/I FUNCTIONS                        * 00003
      749.0      *                                                                     * 00003
      750.0      **********************************************************************/ 00003
      751.0                                                                              00016
      752.0      DECLARE (ABS,                                                           00004
      753.0               ADDR,                                                          00005
      754.0               ALLOCATION,                                                    00006
      755.0               ANY,                                                           00007
      756.0               BIT,                                                           00008
      757.0               BINARY,                                                        00009
      758.0               CHAR,                                                          00010
      759.0               COMPLETION,                                                    00011
      760.0               DATE,                                                          00012
      761.0               DATETIME,                                                      00013
      762.0               DIM,                                                           00014
      763.0               DECIMAL,                                                       00015
      764.0               EMPTY,                                                         00016
      765.0               FIXED,                                                         00017
      766.0               HBOUND,                                                        00018
      767.0               HIGH,                                                          00019
      768.0               INDEX,                                                         00020
      769.0               LBOUND,                                                        00021
      770.0               LENGTH,                                                        00022
      771.0               LINENO,                                                        00023
      772.0               LOW,                                                           00024
      773.0               MAX,                                                           00025
      774.0               MIN,                                                           00026
      775.0               MOD,                                                           00027
      776.0               NULL,                                                          00028
      777.0               ONCODE,                                                        00029
      778.0               ONKEY,                                                         00030
      779.0               PLIRETC,                                                       00031
      780.0               PLIRETV,                                                       00032
      781.0               PLISRTA,                                                       00033
      782.0               PLISRTB,                                                       00034
      783.0               PLISRTC,                                                       00035
      784.0               PLISRTD,                                                       00036
      785.0               REPEAT,                                                        00037
      786.0               ROUND,                                                         00038
      787.0               SAMEKEY,                                                       00039
      788.0               STATUS,                                                        00040
      789.0               STG,                                                           00041
      790.0               STORAGE,                                                       00042
      791.0               STRING,                                                        00043
      792.0               SUBSTR,                                                        00044
      793.0               TIME,                                                          00045
      794.0               TRANSLATE,                                                     00046
      795.0               TRUNC,                                                         00047
      796.0               UNSPEC,                                                        00048
      797.0               VERIFY)            BUILTIN;                                    00049
      798.0                                                                              00021
      799.0                                                                              00027
      800.0      /********************************************************************** 00001
      801.0      *                                                                     * 00002
      802.0      *                           SUBSET LINKDTE                            * 00002
      803.0      *                                                                     * 00003
      804.0      * DECLARATION FOR THE LINK DATE INFORMATION BUILD BY THE LINKDATE     * 00003
      805.0      * PROGRAM AND LINKED WITH THIS PROGRAM.                               * 00003
      806.0      *                                                                     * 00005
      807.0      * LINKDTE IS A SPECIAL VARIABLE SET UP BY THE LINKDATE PROGRAM WHICH  * 00005
      808.0      * IS PART OF THE RELEASE PROCEDURE AND THE MDLKED CATALOGUED          * 00005
      809.0      * PROCEDURE.  THE LINKDATE PROGRAM GENERATES AN EXTERNAL VARIABLE     * 00005
      810.0      * NAMED LINKDTE WHICH CONTAINS THE CURRENT DATE IN MM/DD/YY FORMAT.   * 00005
      811.0      * NOTE: THAT WHEN USING LINKDTE YOU MUST ALWAYS INCLUDE THE ENTRY     * 00005
      812.0      * PLISTART CARD AS LINKDTE IS THE FIRST CSECT AND WOULD BECOME THE    * 00005
      813.0      * DEFAULT ENTRY POINT.                                                * 00005
      814.0      *                                                                     * 00012
      815.0      **********************************************************************/ 00012
      816.0                                                                              00027
      817.0         DECLARE  01  LINKDTE  STATIC EXTERNAL ALIGNED,                       00013
      818.0                      02    HEADER_JUNK    CHAR(8) INIT(' '),                 00014
      819.0                      02    LINK_DATE      VARYING CHAR(30) INIT('UNKNOWN');  00015
      820.0
      821.0      /********************************************************************** 00001
      822.0      *                                                                     * 00002
      823.0      *                           SUBSET REVERSE                            * 00002
      824.0      * DECLARATION FOR FUNCTION REVERSE                                    * 00003
      825.0      * THIS ROUTINE WILL RETURN THE STRING PASSED IN REVERSE ORDER, E.I.   * 00004
      826.0      * WITH THE FIRST CHARACTER LAST, ETC.                                 * 00004
      827.0      *                                                                     * 00006
      828.0      * BACKWARD_STRING = REVERSE(STRING)                                   * 00006
      829.0      *                                                                     * 00007
      830.0      * SOURCE IS IN FG500242                                               * 00007
      831.0      *                                                                     * 00008
      832.0      **********************************************************************/ 00008
      833.0
      834.0         DECLARE REVERSE ENTRY(VARYING CHAR(*))                               00009
      835.0                         RETURNS(VARYING CHAR(256)) EXTERNAL;                 00010
      836.0
      837.0      END PLEAREP;                                                            00652
15655-PL6  IBM(R) Enterprise PL/I for z/OS  /******************************************         2024.06.18 15:26:49   Page     3
- Compiler Messages
0 Message       Line.File Message Description
0 IBM2670I W      33.0    The parameter to MAIN should be declared as CHAR(*) VARYING.
  IBM1213I W     681.0    The procedure TRIM is not referenced.
- File Reference Table
0   File    Included From  Name
0      0                   AVL.USER.PLI(PLEAREP)
- Component    Return Code    Messages (Total/Suppressed)    Time
0 Compiler         4               21  /  19                  5 secs
0 End of compilation of PLEAREP

