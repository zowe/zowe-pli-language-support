*process inc nolist;
 /* Reformat a PLI program                             version 0.1   */
 (subrg,strg,size):
 reform: proc(parm) options(main);


 /* Notes:                                                            */
 /* This program is NOT designed to demonstrate super-efficient or    */
 /* otherwise whizzy PLI.                                             */
 /*                                                                   */
 /* This program will be baffled by                                   */
 /* 1): condition code prefix and statement labels on an internal     */
 /*     procedure which span more than one line                       */
 /* 2): multiple block closure,   e.g. end x;   where the presence    */
 /*     of the label name adds more   end;  statements.               */
 /* 3): Code that is NOT in columns 2-72                              */
 /* 4): Pre-processor code                                            */
 /*                                                                   */
 /*_____________________ FILES _______________________________ d:f  _**/
 dcl source        file record input;
 dcl sourcen       file record output;
 /*_____________________ Builtin functions ___________________ d:bif_**/

                             /* string handling                       */
 dcl (bit,bool,char,graphic,high,index,length,low,
      mpstr,repeat,string,substr,translate,unspec,verify
            )           builtin;
                             /* arithmetic                            */
 dcl (abs,add,binary,ceil,complex,conjg,decimal,divide,fixed,
      float,floor,imag,max,min,mod,multiply,precision,
      real,round,sign
            )           builtin;
                             /* mathematical                          */
 dcl (acos,asin,atan,atand,atanh,cos,cosd,cosh,erf,erfc,exp,log,
      log2,log10,sin,sind,sinh,sqrt,tan,tand,tanh
            )           builtin;
                             /* array handling                        */
 dcl (all,any,dim,hbound,lbound,poly,prod,sum
            )           builtin;
                             /* condition handling                    */
 dcl (datafield,onchar,oncode,oncount,onfile,onkey,onloc,onsource
            )           builtin;
                             /* storage control                       */
 dcl (addr,allocation,binaryvalue,currentstorage,empty,entryaddr,
      null,offset,pointer,pointeradd,pointervalue,storage,sysnull
            )           builtin;
                             /* event, multitasking, I/O, others      */
 dcl (completion,status,count,lineno,samekey,date,datetime,pliretv,
      time,plicanc,plickpt,plicommit,plidump,plirest,pliretc,
      plisrta,plisrtb,plisrtc,plisrtd,plitest
            )           builtin;

 /*_____________________ External entry ______________________ d:e  _**/

 dcl subword           entry(char(*),bin fixed(15),bin fixed(15))
                                      returns(char(32767) var);
 dcl strip             entry(char(*)) returns(char(32767) var);
 /*_____________________ General declarations (aggregates)_____d:ag _**/
 dcl  (SourceL(*),
       SourceU(*),
       codeOnly(*),
       commOnly(*),
        OutPut(*))  char(80) ctl;
 dcl  char1            char(1)  def(sourceU(i)) pos(j);
 dcl  char2            char(2)  def(sourceU(i)) pos(j);
 dcl  char1mixed       char(1)  def(sourceL(i)) pos(j);
 dcl  char2mixed       char(2)  def(sourceL(i)) pos(j);
 dcl  commchar1        char(1)  def(commonly(i)) pos(j);
 dcl  commchar2        char(2)  def(commonly(i)) pos(j);
 dcl  codechar1        char(1)  def(codeonly(i)) pos(j);
 dcl  codechar2        char(2)  def(codeonly(i)) pos(j);
 dcl  Uline            char(80) def(sourceU(i)) pos(j);
 dcl  CodeLine         char(80) def(CodeOnly(i)) pos(j);
 dcl  CommLine         char(80) def(CommOnly(i)) pos(j);
 dcl  OutPutLine       char(80) def(  OutPut(i)) pos(j);

 dcl 1 properties(*) ctl,
         2 (stmt_start,
            stmt_end,
            all_comment,
            nest_change)      bit(1) aligned,
         2 stmt_kwd           char(8),
         2 stmt_kwd_pos       bin fixed(15),
         2 nest               bin fixed(15);
 dcl 1 print,
         2 line#              pic'zzz9b',
         2 Properties,
           3 (stmt_start,
              stmt_end,
              all_comment,
              nest_change)      char(1),
           3 nest               pic'zz9b',
           3 stmt_kwd           char(9),
         2 start              char(1) init('>'),
         2 outline            char(80);
                             /* We may want to put in PROC and        */
                             /* BEGIN later, so make arrarys.         */
 dcl  kwd_l1(2)         char(11) var init ('DO',
                                           'SELECT');
 dcl  kwd_l2(1)         char(11) var init ('END');
                             /* delimiters that may appear before or  */
                             /* after a PLI keyword                   */
 dcl dlm_b4            (5) char(1) init(' ',';',')','/',':');
 dcl dlm_af            (4) char(1) init(' ',';','(','/');
 dcl nest_kwds         (4) char(8) var
                         init('DO','SELECT','BEGIN','END');
 dcl nest_chg_now      (4) bit(1) aligned init(
                              '0'b,'0'b,'0'b,'1'b);
 dcl nest_value        (4) bin fixed(15) init(1,1,1,-1);
 dcl left_padding      (0:25) char(250) var;
 dcl left_padding_L    (0:25) bin fixed(15);
 /*_____________________ General declarations (elements)_______d:lm _**/

 dcl (i,j,k,l,m,n)      bin fixed(15) init(0);
 dcl (lines,
      #keywords,
      lastCode,
      commE,
      commL,
      commS,
      first_nb,
      second_nb,
      nest_level,
      leadblanksL,
      shift,
      kwd_subsc,
      MaxErr)           bin fixed(15) init(0);
 dcl  (commcharcount,
       codecharcount)   dec fixed(7) init(0);
 dcl  NewP              pic'zzz9';
 dcl (eofSource,
      linewritten,
      xcomments)        bit(1) aligned init('0'b);
 dcl (Line,
      TmpLine
          )             char(80);
 dcl Longtext           char(32767) var init('');
 dcl (lower,
      lowerc,
      pm,
      po,
      pp,
      pc,
      pu)               char(3);
 dcl keyword            char(8) var;
 dcl datec              char(6);
 dcl timec              char(9);
 dcl asa                char(1);
 dcl (scol,
      colrqd,
      bc,
      lc,
      indent)           fixed(3) init(0);
 dcl (e0,
      e4,
      e8,
      e12)              char(*) var ctl;
 dcl  parm              char(100) var;
 dcl  varstr            char(200) var;
 dcl  var8              char(8)   var;
 dcl  leadblanks        char(80)  var;
 dcl (lbox,
      sbox,
      ol1,
      ol2 )             char(80);
 dcl (p1,
      p2,
      p3,
      p4)               pic 'zzz9';
                             /*****************************************/
                             /* Line counts for each file             */
                             /*****************************************/
  datec = date();
  timec = time();
  put skip(1) edit('PLI reformatter Version 01 ' ||
     substr(datec,1,2) || '/' ||
     substr(datec,3,2) || '/' ||
     substr(datec,5,2) || ' ' ||
     substr(timec,1,2) || ':' ||
     substr(timec,3,2) || ':' ||
     substr(timec,5,2) || ' ')(a);

  get string(parm) data(pm,pu,po,scol,indent,bc,lc,pp,pc,lower,lowerc);

  on endfile(source) eofSource = '1'b;
                             /* Determine number of source lines      */
  open  file(source);
  read file(source) into(Line);
  do while(^eofSource);
     lines = lines+1;
     read file(source) into(Line);
  end;
  eofSource = '0'b;
  close file(source);

  alloc SourceL(lines);
  alloc SourceU(lines);
  alloc  OutPut(lines);
  alloc Properties(lines);
  alloc codeOnly(lines);
  alloc commOnly(lines);
  Properties = '';
  codeOnly   = '';
  commOnly   = '';
                             /* Initialise left_padding for each nest */
                             /* level                                 */
  call Emsg(2,0,'','Column Starts');
  do i = lbound(left_padding,1) to hbound(left_padding,1);
     left_padding(i)   = substr((100)' ',1,(scol-1)+(indent*i));
     left_padding_L(i) = length(left_padding(i));
     call Emsg(2,0,'','Nest:' || i || ' Column:' || left_padding_l(i));
  end;
                             /* Read source file into correctly sized */
                             /* variable                              */
  open  file(source);

  call Emsg(1,0,'','Source');
  do i = 1 to lines;
     read file(source) into(SourceL(i));
                             /* remove line numbers                   */
     SourceL(i) = Substr(Sourcel(i),1,72);
     OutPut(i) = SourceL(i);
                             /* form upper-case version               */
     SourceU(i) = translate(SourceL(i),'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                                       'abcdefghijklmnopqrstuvwxyz');
     if pm = 'YES'
     then put skip(1) edit(i,SourceL(i))(f(5),a);
  end;

                             /* take out comments and literals in the */
                             /* upper-case version                    */
  do i = 1 to hbound(sourceU,1);
                             /* assume PLI columns 1-72               */
     do j = 1 to 72;
                             /* blank out all comments                */
        if char2 = '/*' then
    comloop:
        do i = i to hbound(SourceU,1);
           do j = j to 72;
              if char2 = '*/' then
              do;
                 commchar2 = char2mixed;
                 codechar2 = '  ';
                 char2     = '  ';
                 j=j+2;
                 leave comloop;
              end;
              if char1 ^= '' & char2 ^= '/*' & char1 ^= '*'
              then commcharcount = commcharcount+1;
              commchar1 = char1mixed;
              char1 = '';
           end;
           j = 1;
        end;
        if lower = 'YES'
        then  codechar1 = translate(char1mixed,
                                   'abcdefghijklmnopqrstuvwxyz',
                                   'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
        else  codechar1 = char1mixed;
                             /* null string special case              */
        if char2 = '''''' then char2 = '  ';
                             /* blank out all literal strings         */
        if char1 = '''' then
        litloop:
        do i = i to hbound(SourceU,1);
           codechar1 = char1mixed;
           char1 = '';
           do j = j+1 to 72;
                             /* quote in the string!                  */
              if char2 = '''''' then
              do;
                 codechar2 = char2mixed;
                 char2 = '';
              end;

              if char1 = '''' then
              do;
                 codechar1 = char1mixed;
                 char1 = '';
                 leave litloop;
              end;
              codechar1 = char1mixed;
              char1 = '';
           end;
           j = 1;
        end;
        if char1 ^= '' then codecharcount = codecharcount+1;
     end;
  end;
                             /* detect statement start/end and kwd    */
  do i = 1 to hbound(sourceU,1)-1;
     if rightmostNB(Uline) = ';' then
     do;
        properties.stmt_end(i)     = '1';
        properties.stmt_start(i+1) = '1';
     end;
     if properties.stmt_start(i) = '1' then
     do;
                             /* make sure stmt-start is correct       */
                             /* (comments blanked out at this point)  */
        if Uline = '' then
        do;
           properties.stmt_end(i)     = '0';
           properties.stmt_start(i+1) = '1';
        end;
                             /* pick out statement keyword            */
        else call firstkw(i);
     end;
  end;
                             /* determine the nest level of each line */
  do i = 1 to hbound(sourceU,1)-1;
     properties.nest(i) = nest_level;
                             /* is there a statement keyword?         */
     call change_level(SourceU(i),i);
  end;
                             /* Move the code about                   */

  do i = 1 to hbound(CodeOnly,1);
                             /* beginning of a statement?             */
     if properties.stmt_kwd(i) ^= '' then
     do;
                             /* stop ASA char messing up searches     */
        asa = substr(codeLine,1,1);
        substr(codeLine,1,1) = '';
                             /* find where code starts                */
        first_nb   = verify(CodeLine,' ');
        shift      =  first_nb - (left_padding_L(properties(i).nest)+1);
        leadblanks  =  left_padding(properties(i).nest);
        leadblanksL =  length(leadblanks);
                             /* restore ASA char to code line         */
        substr(codeLine,1,1) = asa;
        asa = '';
                             /* line up the code                      */
 shift_statement:
        do while(i < hbound(CodeOnly,1));
           asa = substr(codeLine,1,1);
           substr(codeLine,1,1) = '';

           if shift > 0 then
                             /* code must be shifted to the LEFT..    */
           do j = 1 to shift
                       while(substr(CodeLine,1,leadBlanksL+1) = ' ');
              codeline = substr(codeLine,2);
           end;
           else
           if shift < 0 then
                             /* code must be shifted to the RIGHT.    */
           do j = 1 to abs(shift) while(substr(CodeLine,72,1) = ' ');
              codeline = ' ' || codeLine;
           end;
                             /* try and line up DO-END-SELECT         */
           call line_up;
                             /* restore ASA char to code line         */
           substr(codeLine,1,1) = asa;
           asa = '';

           if properties(i+1).stmt_kwd ^= '' then
              leave shift_statement;
           i = i+1;
        end;
     end;
  end;
                             /* reformat comment lines                */
  longtext = '';
  Lbox = repeat(' ',lc-1) || '/' || (80)'*';
  substr(lbox,72) = '/';
  Sbox = repeat(' ',bc-1) || '/' || (80)'*';
  substr(sbox,72) = '/';

  do i = 1 to hbound(CommOnly,1);
                             /* optionally change comments in all     */
                             /* upper case to all lower case          */
     if   commLine ^= ''    then
     if   lowerc   =  'YES' then
     if (translate(commline,
         '                                                            '
         || (10)' ',
         '/*ABCDEFGHIJKLMNOPQRSTUVWXYZ^!"$?%?&*()_+`-=??{};''#:@?<>,.\|'
         || '0123456789')
        = ' ')
     then commLine = translate(Commline,
         'abcdefghijklmnopqrstuvwxyz',
         'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
                             /* Check for single-line only            */
     commS = index(commLine,'/*');
     commE = index(commLine,'*/');
                             /* Push it over to the right             */
     if CommE ^= 71 & CommE > 0 then
     do;
        do j = 1 to 80 while(substr(commline,72,1) = '');
           commline = ' ' || commline;
        end;
     end;
     commS = index(commLine,'/*');
     commE = index(commLine,'*/');
     commL = CommE - CommS + 2;

     if   commLine ^= ''
                             /* Only reformat single-line comments    */
       &   (commS ^= 0 & commE > CommS)
     then
     do;
                             /* rightmost code byte..                 */
        do j = 72 to 2 by -1 while(substr(CodeLine,j,1) = '');
        end;
        lastCode = j+2;
                             /* code & coment don't overlap           */
        if   (lastCode < CommS)
                             /* comment is not too long               */
          &  (67-lc > CommL)
        then
        do;
           varstr = substr(commline,CommS+2);
           k = index(varstr,'*/');
           varstr = substr(varstr,1,k-2);
           Commline = repeat(' ',max(lc,lastcode)-2) || '/*' || varstr;
           substr(commLine,71) = '*/';
        end;
     end;
  end;
 /*********************************************************************/
                             /* create new program lines              */
  longtext = '';
  do i = 1 to hbound(CodeOnly,1);

     select;
        when (CodeLine = '' &
              CommLine = '')  OutPutLine = '';
        when (CodeLine = '')  OutPutLine = Commline;
        when (CommLine = '')  OutPutLine = Codeline;
        otherwise
        do;
                             /* code and comment on the line          */
           OutPutLine = CodeLine;
                             /* rightmost code byte..                 */
           do j = 72 to 2 by -1 while(substr(CodeLine,j,1) = '');
           end;
                             /* leftmost comment byte                 */
           k = verify(commline,' ');
           if k>j then
           do;
                             /* code does not overlap comment         */
              Substr(OutPutLine,k) = Substr(Commline,k);
           end;
           else
           do;
                             /* code does overlap comment...          */
              substr(OutPutLine,j+1) = Substr(commline,k);
              if substr(OutPutLine,73,8) ^= '' then
              do;
                             /* ...and there is truncation            */
                 substr(OutPutLine,71) = '*/';
                 call addtext(i);
              end;
           end;
        end;
     end;
  end;
  if length(longtext) > 0 then Call Emsg(3,4,'S',
          'Comments truncated on these lines:' || longtext);
 /*********************************************************************/
                             /* write output lines to file            */
  do i = 1 to hbound(OutPut,1);
     if i < hbound(OutPut,1) then
     do;
        if properties.nest(i+1) > properties.nest(i) then
        do;
           j = find_keyword(CodeOnly(i));
           if j > left_padding_L(properties.nest(i)) then
           do;
                             /* line to be split                      */
              ol1 = substr(codeOnly(i),1,j-1);
              if CommOnly(i) ^= '' then
              do k = 1 to 72;
                 if substr(codeOnly(i),k,1) = ''
                 then substr(ol1,k,1) = substr(CommOnly(i),k,1);
              end;
              write file(sourceN) from(Ol1);

              ol2 = left_padding(properties.nest(i)) ||
                    substr(CodeOnly(i),j);
              write file(sourceN) from(Ol2);
              linewritten = '1'b;
           end;
        end;
     end;
     if ^linewritten
     then write file(sourceN) from(OutPutLine);
     linewritten = '0'b;
  end;
                             /* print output lines                    */
  if po = 'YES' then
  do;
     put skip(1) edit('   Line number (output)')(a);
     put skip(1) edit('   | 1=Statement starts on this line')(a);
     put skip(1) edit('   | |1=Statement ends  on this line')(a);
     put skip(1) edit('   | ||1=Line is all comment')(a);
     put skip(1) edit('   | |||1=Nest level change')(a);
     put skip(1) edit('   | ||||  Nest level')(a);
     put skip(1) edit('   | ||||  | statement keyword')(a);
     put skip(1) edit('   | ||||  | |')(a);
     do i = 1 to lines;
        print.line#      = i;
        print.properties = properties(i),by name;
        print.outline    = OutPut(i);
        put skip(1) edit(String(print))(a);
     end;
  end;
                             /* print comment-only lines              */
  if pc = 'YES' then
  do;
     put skip(1) edit('   Line number (Comments-only)')(a);
     put skip(1) edit('   | 1=Statement starts on this line')(a);
     put skip(1) edit('   | |1=Statement endss on this line')(a);
     put skip(1) edit('   | ||1=Line is all comment')(a);
     put skip(1) edit('   | |||1=Nest level change')(a);
     put skip(1) edit('   | ||||  Nest level')(a);
     put skip(1) edit('   | ||||  | statement keyword')(a);
     put skip(1) edit('   | ||||  | |')(a);
     do i = 1 to lines;
        print.line#      = i;
        print.properties = properties(i),by name;
        print.outline    = commOnly(i);
        put skip(1) edit(String(print))(a);
     end;
  end;
                             /* print PLI-only lines                  */
  if pp = 'YES' then
  do;
     put skip(1) edit('   Line number (Code-only)')(a);
     put skip(1) edit('   | 1=Statement starts on this line')(a);
     put skip(1) edit('   | |1=Statement endss on this line')(a);
     put skip(1) edit('   | ||1=Line is all comment')(a);
     put skip(1) edit('   | |||1=Nest level change')(a);
     put skip(1) edit('   | ||||  Nest level')(a);
     put skip(1) edit('   | ||||  | statement keyword')(a);
     put skip(1) edit('   | ||||  | |')(a);
     do i = 1 to lines;
        print.line#      = i;
        print.properties = properties(i),by name;
        print.outline    = codeOnly(i);
        put skip(1) edit(String(print))(a);
     end;
  end;
                             /* print upper case, modified text       */
  if pu = 'YES' then
  do;
     put skip(1) edit('   Line number (upper case)')(a);
     put skip(1) edit('   | 1=Statement starts on this line')(a);
     put skip(1) edit('   | |1=Statement endss on this line')(a);
     put skip(1) edit('   | ||1=Line is all comment')(a);
     put skip(1) edit('   | |||1=Nest level change')(a);
     put skip(1) edit('   | ||||  Nest level')(a);
     put skip(1) edit('   | ||||  | statement keyword')(a);
     put skip(1) edit('   | ||||  | |')(a);
     do i = 1 to lines;
        print.line#      = i;
        print.properties = properties(i),by name;
        print.outline    = SourceU(i);
        put skip(1) edit(String(print))(a);
     end;
  end;
 qquit:

  if allocation(e0)  > 0 then call Prt(e0 ,'I');
  if allocation(e4)  > 0 then call Prt(e4 ,'W');
  if allocation(e8)  > 0 then call Prt(e8 ,'E');
  if allocation(e12) > 0 then call Prt(e12,'S');

  newp = maxErr;
  call Emsg(1,0,'',newp || ' was maximum error code');
  put skip(1) edit('PLI reformatter - complete')(a);
  call pliretc(maxErr);
 /*********************************************************************/
 set_line: proc;
  if length(varstr) >= 73 then
  do while(substr(varstr,73) ^= '');
     varstr = substr(varstr,2);
  end;
  codeLine = varstr;
 end;
 /*********************************************************************/
 line_up: proc;
  dcl non_blank   bin fixed(15);
                             /* try and line up DO-END-SELECT         */
  non_blank = verify(CodeLine,' ');
  if non_blank > 0
  then
  if substr(codeLine,non_blank,2) = 'DO' |
     substr(codeLine,non_blank,6) = 'SELECT' |
     substr(codeLine,non_blank,3) = 'END'
  then
  do;
     tmpLine = leadblanks || substr(CodeLine,non_blank);
     if substr(tmpline,73) = ''
     then codeline = tmpline;
  end;
 end;
 /*********************************************************************/
 find_keyword: proc(kwline) returns(bin fixed(15));
  dcl kwline      char(80);
  dcl Fkeyword    char(11) var;

  dcl xl_kwline   char(80);
  dcl (i,j,k,l,m,n) bin fixed(15);

  xl_kwline = translate(kwline,
         'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
         'abcdefghijklmnopqrstuvwxyz');

  l = 0;
 find:
  do i = lbound(nest_kwds,1) to hbound(nest_kwds,1);
     do j = lbound(dlm_b4,1) to hbound(dlm_b4,1);
        do k = lbound(dlm_af,1) to hbound(dlm_af,1);

           Fkeyword = dlm_b4(j) || nest_kwds(i) || dlm_af(k);
           kwd_subsc = i;

           l = index(xl_kwline,Fkeyword);
           if l > 0 then
           do;
                             /* say where the actual keyword is       */
              l = l+1;
              leave find;
           end;
        end;
     end;
  end;
  return(l);
  end find_keyword;
 /*********************************************************************/
 change_level: proc(thisline,thisline#);
  dcl thisline    char(80);
  dcl thisline#   bin fixed(15);

  dcl (i,j,k,l,m,n) bin fixed(15);

                             /* find keyword with allowed delimiters  */
  l = find_keyword(thisline);
  if l > 0 then
  do;
     nest_level = nest_level + nest_value(kwd_subsc);
     properties.stmt_kwd_pos(thisline#) = l;
                    /* cater for procedure-ends              */
     if nest_level < 0 then nest_level = 0;
                    /* test whether the nest level changes   */
                    /* on this statement or the next         */
     if nest_chg_now(kwd_subsc) then
         properties.nest(thisline#) = nest_level;
  end;

  end change_level;
 /*********************************************************************/
 firstkw: proc(lineno);
 /*********************************************************************/
 /* return 1st pli keyword                                            */
 /* As of March 2000 this subroutine assumes that:                    */
 /*                                                                   */
 /* (condition-code-prefixes):label: keyword                          */
 /*                                                                   */
 /* are all on the same line. This is a bold assumption.              */
 /*********************************************************************/
  dcl kwstring char(80) var;
  dcl xword    char(80) var;
  dcl lineno   bin fixed(15);

  kwstring = strip(uline);
  if substr(kwstring,1,1) = '(' then
  do;
                             /* condition code prefix                 */
                             /* (assume closed on this line)          */
      j = index(kwstring,'):');
      kwstring = substr(kwstring,j+1);
  end;
                             /* label (assume ONE ONLY - ooh missus)  */
  xword = subword(kwstring,1,1);
  if substr(xword,length(xword),1) = ':'
  then kwstring = substr(kwstring,length(xword)+1);
                             /* get 1st word of string                */
  keyword = subword(kwstring,1,1);
  if length(keyword) > 0 then
  if substr(keyword,1,1) = '%' then keyword = '';
                             /* keyword null, look on next line       */
  if keyword ^= ''
  then properties.stmt_kwd(i) = keyword;
  else
  do;
     properties.stmt_start(i)   = '0';
     properties.stmt_start(i+1) = '1';
  end;
 end;
 /*********************************************************************/
                             /* find rightmost non-blank in 2-72      */
 rightmostNB: proc(str) returns(char(1));
  dcl str char(80);
  dcl (i,j,k,l,m,n) bin fixed(15);

  do i = 72 to 2 by -1 while(substr(str,i,1) = '');
  end;
  if i<2
  then return('');
  else return(substr(str,i,1));
 end;
 /*********************************************************************/
 addtext: proc(i);
 dcl p1     pic '9';
 dcl p2     pic '99';
 dcl p3     pic '999';
 dcl p4     pic '9999';
 dcl i      bin fixed(15);

  select;
     when (i<10)
     do;
        p1 = i;
        if longtext = ''
        then longtext = char(p1);
        else longtext = longtext || ',' || char(p1);
     end;
     when (i<100)
     do;
        p2 = i;
        if longtext = ''
        then longtext = char(p2);
        else longtext = longtext || ',' || char(p2);
     end;
     when (i<1000)
     do;
        p3 = i;
        if longtext = ''
        then longtext = char(p3);
        else longtext = longtext || ',' || char(p3);
     end;
     otherwise
     do;
        p4 = i;
        if longtext = ''
        then longtext = char(p4);
        else longtext = longtext || ',' || char(p4);
     end;
  end;
 end;
 /*********************************************************************/
 prt: proc(echar,level);
  dcl echar        char(*) var ctl;
  dcl level        char(1);
  dcl printline    char(80) var;
                             /* array for error messages              */
  dcl eback        char(*) var ctl;
  dcl (i,j)        bin fixed(15);
  dcl linelen      bin fixed(15) init(70);
  dcl first        bit(1) auto init('1'b);

  put skip(1) edit(level || '-level messages')(a);

  do i = allocation(echar) to 1 by -1;
                             /* put error messages in reverse order   */
     alloc eback char(10+length(echar)) init(echar);
     free echar;
  end;
                             /* now print messages in correct order   */
  do i = 1 to allocation(eback);
                             /* some error lines may need multiple    */
                             /* lines to print out in full            */
 printloop:
     do k = 1 to 100 while(eback ^= '');
        if length(eback) <= linelen then
        do;
           put skip(1) edit((05)' ' || eback)(a);
           leave printloop;
        end;
        do j = linelen to 1 by -1
                       while(  substr(eback,j,1) ^= ','
                             & substr(eback,j,1) ^= ' ');
        end;
        put skip(1) edit((05)' ' || substr(eback,1,j))(a);

        eback =      substr(eback,j+1);
     end;
     if k > 100 then put skip(1) edit('Limit exceeded')(a);
     free eback;
  end;
 end prt;
 /*********************************************************************/
 Emsg: proc(Enum,Ecode,Estore,Etext);

 dcl Enum          pic'999';
 dcl Ecode         pic'99';
 dcl Estore        char(1);
 dcl etext         char(*);
 dcl vtext         char(10+length(etext)) var auto;
 dcl i             bin fixed(15);
  vtext =  'PRF' || enum || ' ' || ecode || ' ' || etext;
  i = length(vtext);
  maxerr = max(maxerr,ecode);

  if estore = ''
  then
     put skip(1) edit(vtext)(a);
  else
  do;

     select(ecode);
                             /* store error messages for each error   */
                             /* level - there may be any number       */
        when(0)
        do;
           alloc e0 char(i);
           e0 =  vtext;
        end;
        when(4)
        do;
           alloc e4 char(i);
           e4 =  vtext;
        end;
        when(8)
        do;
           alloc e8 char(i);
           e8 =  vtext;
        end;
        when(12)
        do;
           alloc e12 char(i);
           e12 =  vtext;
        end;
     end;
  end;

  end emsg;
  END reform;
*process gs nolist nomap noesd;
 strip:   proc (instring)  returns(char(32767) var);
  dcl instring                 char(*);
  dcl (i,j)                    bin fixed(15);
  dcl (length,substr,string)   builtin;

  do i = 1 to length(instring) while(substr(instring,i,1) = ' ');
  end;
  do j = length(instring) to 1 by -1 while(substr(instring,j,1) = ' ');
  end;

  return ( substr(instring,i,j - i+1)  );
  end strip;
*process gs nolist nomap;
 subword: proc (instring,wordno,words) returns(char(32767) var);
  dcl instring        char(*);
  dcl (wordno,words)  bin fixed(15);
  dcl (i,j,k)         bin fixed(15);
  dcl start           bin fixed(15);
  dcl (length,substr) builtin;
  j = 1;
  k = 0;
  if words < 1 | wordno < 1 then return('');
                             /* search until the wordcount is met     */
  do i = 1 to length(instring) until (k = words);

                             /* ignore intermediate blanks            */
     do i = i to length(instring) while (substr(instring,i,1) = ' ');
     end;
                             /* store 1st relevant word's  position   */
     if j = wordno then start = i;
                             /* count the relevant words found        */
     if j >= wordno then k = k + 1;
                             /* count words found so far              */
     j = j + 1;
                             /* find the end of the current word      */
     do i = i to length(instring) until (substr(instring,i,1)  = ' ');
     end;
  end;
  return(substr(instring,start,i-start));
  end subword;
