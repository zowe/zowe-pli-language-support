*PROCESS MAR(2,72,1);                                                   00001
 /**********************************************************************00002
 *                                                                     *00002
 * SEGMENT NAME:                                                       *00002
 *                                                                     *00002
 *    PLEAREP -- PLI_EXECUTION_ANALYZER_REPORT                         *00002
 *                                                                     *00003
 *       THIS PROGRAM IS READS THE SAMPLER FILE GENERATED BY THE PLEA  *00003
 *       PROGRAM AND GENERATES THE PERFORMANCE REPORTS. THE ONLY PARM  *00003
 *       TO THIS PROGRAM IS TERM=Y WHICH FORMATS THE FILE TO BE EASIER *00003
 *       TO READ FROM A TERMINAL (SDSF).  TERM=N FORMATS FOR A         *00003
 *       HARDCOPY LISTING.                                             *00003
 *                                                                     *00008
 * NOTES:                                                              *00008
 *                                                                     *00008
 *    1. ISSUE HISTORY:                                                *00008
 *                                                                     *00009
 *       REASON FOR ISSUE 02:                                          *00009
 *       MODIFY HEADINGS TO READ EASIER FROM SDSF                      *00010
 *                                                                     *00011
 *       REASON FOR ISSUE 03:                                          *00011
 *       ADD EXTNAME FIELD                                             *00012
 *                                                                     *00013
 *       REASON FOR ISSUE 04:                                          *00013
 *       HANDLE CASE WHERE TRAILER RECORD IS MISSING.                  *00014
 *                                                                     *00015
 *       REASON FOR ISSUE 05:                                          *00015
 *       FIX TWO BUGS FOUND AND REPAIRED BY MIKE FERERO.  MISSING LAST *00016
 *       LINE IN BLOCK AND PROC REPORTS.                               *00016
 *                                                                     *00018
 **********************************************************************/00018

 PLEAREP:                                                               00019
    PROCEDURE(MAINPARM) OPTIONS(MAIN) REORDER;                          00020
    DECLARE  MAINPARM    VARYING CHAR(100);                             00021

 /**********************************************************************00022
 *                                                                     *00022
 * STRUCTURE CUR$LOC IS THE STANDARD TRACE RECORD OUTPUT BY THE        *00022
 * SAMPLER ROUTINE.                                                    *00022
 *                                                                     *00025
 * STRUCTURES LOC_HEADER AND LOC_TRAILER ARE OUTPUT BY THE SAMPLER     *00025
 * ROUTINE AT THE START AND END OF THE DATA.                           *00025
 *                                                                     *00027
 **********************************************************************/00027
    DECLARE  1  CUR$LOC  BASED(C_PTR),                                  00028
                2  STMT   CHAR(8)       INIT('        '),               00029
                2  PROC   CHAR(31)      INIT('        '),               00030
                2  EXT    CHAR(8)       INIT('        ');               00031
    DECLARE  C_PTR        POINTER AUTO INIT(NULL());                    00032
    DECLARE  1  LOC_HEADER   AUTO,                                      00033
                2  STMT   CHAR(8)       INIT(' '),                      00034
                2  HEADER CHAR(4)       INIT(' '),                      00035
                2  LOAD   CHAR(8)       INIT(' '),                      00036
                2  TYPE   CHAR(4)       INIT(' '),                      00037
                2  INT    PIC'ZZZZZZ99' INIT(0),                        00038
                2  SPARE  CHAR(15)        INIT(' ');                    00039
    DECLARE  1  LOC_TRAILER  AUTO,                                      00040
                2  STMT    CHAR(8)         INIT(' '),                   00041
                2  HEADER  CHAR(4)         INIT(' '),                   00042
                2  SP1     CHAR(2)         INIT(' '),                   00043
                2  COUNT   PIC'ZZZZZZZ9'   INIT(0),                     00044
                2  MINUTES PIC'ZZZZZZZ9'   INIT(0),                     00045
                2  STMTS   PIC'ZZZZZZZZ9'  INIT(0),                     00046
                2  SPARE  CHAR(8)         INIT(' ');                    00047
                                                                        00048
    DECLARE  1  LOC_SUMMARY  BASED(L_PTR),                              00049
                2  STMT   CHAR(8)       INIT('        '),               00050
                2  PROC   CHAR(31)      INIT('        '),               00051
                2  EXT    CHAR(8)       INIT('        '),               00052
                2  COUNT  PIC'ZZZZZZZ9' INIT(0);                        00053
    DECLARE  L_PTR        POINTER AUTO INIT(NULL());                    00054
    DECLARE  1  PROC_SUMMARY  BASED(P_PTR),                             00055
                2  STMT   CHAR(8)       INIT('        '),               00056
                2  PROC   CHAR(31)      INIT('        '),               00057
                2  EXT    CHAR(8)       INIT('        '),               00058
                2  COUNT  PIC'ZZZZZZZ9' INIT(0);                        00059
    DECLARE  P_PTR        POINTER AUTO   INIT(NULL());                  00060
    DECLARE  REPORT       FILE PRINT;                                   00061
    DECLARE  PAGE#        PIC'ZZZ9' AUTO INIT(1);                       00062
    DECLARE  SYSPRINT     FILE PRINT;                                   00063
    DECLARE  TRACE$$      FILE RECORD INPUT  ENV(TOTAL,FB,RECSIZE(47)); 00064
    DECLARE  WORKOUT      FILE RECORD OUTPUT ENV(TOTAL,FB,RECSIZE(55)); 00065
    DECLARE  WORKOU2      FILE RECORD OUTPUT ENV(TOTAL,FB,RECSIZE(55)); 00066
    DECLARE  WORKIN       FILE RECORD INPUT  ENV(TOTAL,FB,RECSIZE(55)); 00067
    DECLARE  EOF_TRACE$$   BIT(1) ALIGNED STATIC INIT('0'B);            00068
    DECLARE  EOF_WORKIN    BIT(1) ALIGNED STATIC INIT('0'B);            00069
    DECLARE  TRACE_HEADER  CHAR(4) INIT('+++1');                        00070
    DECLARE  TRACE_TRAILER CHAR(4) INIT('+++2');                        00071
    DECLARE  TOTAL_INTERRUPTS FIXED BINARY(31) INIT(0);                 00072
    DECLARE  STARS         CHAR(100) STATIC INIT((100)'*');             00073
    DECLARE  STARS_80      CHAR(80)  STATIC INIT((80)'*');              00074
    DECLARE  TERM_FORMAT   BIT(1) ALIGNED AUTO INIT('0'B);              00075
    DECLARE  TRAILER_FOUND BIT(1) ALIGNED AUTO INIT('0'B);              00076
                                                                        00077
    TERM_FORMAT = INDEX(MAINPARM,'TERM=Y') > 0;                         00078
    OPEN FILE(SYSPRINT) TITLE('PLEAPRNT') OUTPUT;                       00079
    ON ENDFILE(TRACE$$) EOF_TRACE$$ = '1'B;                             00080
    ON ENDFILE(WORKIN)  EOF_WORKIN  = '1'B;                             00081
    OPEN FILE(REPORT)  STREAM OUTPUT;                                   00082
    CALL INITIAL_SORT_AND_HEADERS();                                    00083
    IF ^TRAILER_FOUND                                                   00084
    THEN                                                                00085
       DO;                                                              00086
          PUT FILE(REPORT) SKIP(1)  EDIT(                               00087
              'NO TRAILER RECORD FOUND, SAMPLING JOB PROBABLY ABENDED') 00088
              (A);                                                      00089
          PUT FILE(REPORT) SKIP(1)  EDIT(                               00090
              'NUMBER OF INTERRUPTS IS:      ',                         00091
              TOTAL_INTERRUPTS)                                         00092
              (A,X(5),F(11));                                           00093
       END;                                                             00094
    CALL PRODUCE_PROC_REPORT();                                         00095
    CALL PRODUCE_BLOCK_REPORT();                                        00096
    CALL PLIRETC(0);                                                    00097
    RETURN;                                                             00098
                                                                        00099
 INITIAL_SORT_AND_HEADERS:                                              00100
    PROCEDURE;                                                          00101
    DECLARE  RC           FIXED BINARY(31) AUTO INIT(0);                00102
    OPEN FILE(TRACE$$) INPUT;                                           00103
    ON ENDPAGE(REPORT)                                                  00104
    BEGIN;                                                              00105
       IF PAGE# ^= 1                                                    00106
       THEN                                                             00107
          PUT FILE(REPORT) PAGE EDIT(                                   00108
          'BASIC STATISTICS',                                           00109
          'PAGE ',PAGE#)(A,COL(65),A,A);                                00110
       ELSE                                                             00111
          DO;                                                           00112
             PUT FILE(SYSPRINT) SKIP EDIT(                              00113
                 'PLEAREP - PL/I EXECUTION ANALYZER REPORT',            00114
                 'RELEASE 2.2 AS OF ',                                  00115
                  LINKDTE.LINK_DATE)(A,X(1),A,A);                       00116
             IF TERM_FORMAT                                             00117
             THEN                                                       00118
                PUT FILE(REPORT) SKIP EDIT(                             00119
                    'BASIC STATISTICS')(A);                             00120
             ELSE                                                       00121
                PUT FILE(REPORT) SKIP EDIT(                             00122
                    'BASIC STATISTICS',                                 00123
                    'PAGE ',PAGE#)(A,COL(65),A,A);                      00124
          END;                                                          00125
       PUT FILE(REPORT) SKIP(2) LIST(' ');                              00126
       PAGE# = PAGE# + 1;                                               00127
    END;                                                                00128
    OPEN FILE(WORKOUT) RECORD OUTPUT TITLE('WORK1'),                    00129
         FILE(WORKOU2) RECORD OUTPUT TITLE('WORK2'),                    00130
         FILE(TRACE$$) RECORD INPUT;                                    00131
    EOF_TRACE$$ = '0'B;                                                 00132
    SIGNAL ENDPAGE(REPORT);                                             00133
    ALLOCATE LOC_SUMMARY;                                               00134
    ALLOCATE PROC_SUMMARY;                                              00135
    CALL PLISRTD(' SORT FIELDS=(40,8,CH,A,9,31,CH,A,1,8,CH,A) ',        00136
                 ' RECORD TYPE=F,LENGTH=80 ',                           00137
                 3000000,                                               00138
                 RC,                                                    00139
                 SORT_INPUT,                                            00140
                 SORT_OUTPUT);                                          00141
    FREE LOC_SUMMARY;                                                   00142
    FREE PROC_SUMMARY;                                                  00143
    CLOSE FILE(WORKOUT),                                                00144
          FILE(WORKOU2),                                                00145
          FILE(TRACE$$);                                                00146
    RETURN;                                                             00147

 SORT_INPUT:                                                            00148
    PROCEDURE RETURNS(CHAR(80));                                        00149
    DECLARE  CARD            CHAR(80) BASED(C_PTR);                     00150
    DECLARE  BLANKS          CHAR(80) STATIC INIT(' ');                 00151
    DECLARE  FOXES           CHAR(80) STATIC INIT((80)'FF'X);           00152
    DECLARE  FOXES_DONE      BIT(1) ALIGNED STATIC INIT('0'B);          00153
    DECLARE  PROGRAM         CHAR(8)  STATIC INIT(' ');                 00154
    DECLARE  01 HEADER_OVLY  LIKE LOC_HEADER   BASED(C_PTR);            00155
    DECLARE  01 TRAILER_OVLY LIKE LOC_TRAILER  BASED(C_PTR);            00156
    DECLARE  GOT_RECORD      BIT(1) ALIGNED AUTO INIT('0'B);            00157
                                                                        00158
    READ FILE(TRACE$$) SET(C_PTR);                                      00159
    DO UNTIL(GOT_RECORD);                                               00160
       /**************************************************************  00161
       *                                                                00162
       *   CHECK IF WE HAVE REACHED EOF ON THE INPUT FILE.  IF SO       00163
       *   ADD ONE MORE RECORD OF ALL X'FF'.  IF THAT RECORD HAS        00164
       *   ALREADY BEEN OUTPUT. TELL SORT THAT WE ARE DONE.             00165
       *                                                                00166
       **************************************************************/  00167
       IF EOF_TRACE$$                                                   00168
       THEN                                                             00169
          DO;                                                           00170
             IF FOXES_DONE                                              00171
             THEN                                                       00172
                DO;                                                     00173
                   CALL PLIRETC(8);/* SHOW LAST RECORD ALREADY PASSED */00174
                   C_PTR = ADDR(BLANKS);                                00175
                   GOT_RECORD = '1'B;                                   00176
                END;                                                    00177
             ELSE                                                       00178
                DO;                                                     00179
                   CALL PLIRETC(12); /* SHOW PASSING RECORD */          00180
                   C_PTR = ADDR(FOXES);                                 00181
                   GOT_RECORD = '1'B;                                   00182
                   FOXES_DONE = '1'B;                                   00183
                END;                                                    00184
          END;                                                          00185
       ELSE                                                             00186
          DO;                                                           00187
             /********************************************************  00188
             *                                                          00189
             *   HANDLE THE RECORD JUST READ.                           00190
             *   RIGHT ADJUST THE STATEMENT NUMBER SO IT SORTS          00191
             *   CORRECTLY.                                             00192
             *                                                          00193
             ********************************************************/  00194
             CUR$LOC.STMT = RIGHT_ADJUST(CUR$LOC.STMT,8);               00195
             /********************************************************  00196
             *                                                          00197
             *   CHECK FOR THE HEADER RECORD.  IF IT IS FOUND           00198
             *   SAVE THE DATA FROM IT AND ALSO OUTPUT THE DATA TO      00199
             *   THE REPORT.  DO NOT PASS THIS RECORD TO SORT.          00200
             *                                                          00201
             ********************************************************/  00202
             IF SUBSTR(CUR$LOC.PROC,1,4) = TRACE_HEADER                 00203
             THEN                                                       00204
                DO;                                                     00205
                   LOC_HEADER = HEADER_OVLY;                            00206
                   PROGRAM = HEADER_OVLY.LOAD;                          00207
                   PUT FILE(REPORT) SKIP EDIT(                          00208
                       'NAME OF LOAD MODULE IS:       ',                00209
                        RIGHT_ADJUST(HEADER_OVLY.LOAD,8))(A,X(5),A);    00210
                   PUT FILE(REPORT) SKIP EDIT(                          00211
                       'INTERRUPT INTERVAL IS:       ',                 00212
                       SUBSTR(HEADER_OVLY.INT,1,6),'.',                 00213
                       SUBSTR(HEADER_OVLY.INT,7,2),                     00214
                       ' SECONDS')                                      00215
                       (A,X(5),A,A,A,A);                                00216
                   IF HEADER_OVLY.TYPE = 'REAL'                         00217
                   THEN                                                 00218
                      PUT FILE(REPORT) SKIP                             00219
                          LIST('INTERRUPTS BASED ON WALL TIME.');       00220
                   ELSE                                                 00221
                      PUT FILE(REPORT) SKIP                             00222
                          LIST('INTERRUPTS BASED ON TASK CPU TIME.');   00223
                END;                                                    00224
             ELSE                                                       00225
                /*****************************************************  00226
                *                                                       00227
                *   CHECK FOR THE TRAILER RECORD.  IF IT IS FOUND       00228
                *   SAVE THE DATA FROM IT AND ALSO OUTPUT THE DATA TO   00229
                *   THE REPORT.  DO NOT PASS THIS RECORD TO SORT.       00230
                *                                                       00231
                *****************************************************/  00232
                IF SUBSTR(CUR$LOC.PROC,1,4) = TRACE_TRAILER             00233
                THEN                                                    00234
                   DO;                                                  00235
                      LOC_TRAILER = TRAILER_OVLY;                       00236
                      TRAILER_FOUND = '1'B;                             00237
                      PUT FILE(REPORT) SKIP(1)  EDIT(                   00238
                          'NUMBER OF INTERRUPTS IS:      ',             00239
                          TRAILER_OVLY.COUNT)                           00240
                          (A,X(5),A);                                   00241
                      PUT FILE(REPORT) SKIP(1)  EDIT(                   00242
                          'NUMBER OF PLI STATEMENTS IS: ',              00243
                          TRAILER_OVLY.STMTS)                           00244
                          (A,X(5),A);                                   00245
                      PUT FILE(REPORT) SKIP(1) EDIT(                    00246
                          'ELAPSED TIME FOR SAMPLING RUN:',             00247
                          TRAILER_OVLY.MINUTES,' MINUTE(S)')            00248
                          (A,X(5),A,A);                                 00249
                      PUT FILE(REPORT) SKIP(1) LIST(' ');               00250
                      GET STRING(TRAILER_OVLY.COUNT)                    00251
                          LIST(TOTAL_INTERRUPTS);                       00252
                   END;                                                 00253
                ELSE                                                    00254
                   GOT_RECORD = '1'B;                                   00255
             /********************************************************  00256
             *                                                          00257
             *   ALL RECORDS GET TO HERE.  IF THIS WAS A HEADER OR      00258
             *   TRAILER RECORD, WE WILL READ ANOTHER.  OTHERWISE       00259
             *   WE WILL TELL SORT WE ARE PASSING A RECORD VIA          00260
             *   PLIRETV.                                               00261
             *                                                          00262
             ********************************************************/  00263
             IF CUR$LOC.PROC = '*'                                      00264
             THEN                                                       00265
                CUR$LOC.PROC = PROGRAM;                                 00266
             IF (GOT_RECORD)                                            00267
             THEN                                                       00268
                CALL PLIRETC(12); /* SHOW PASSING RECORD */             00269
             ELSE                                                       00270
                READ FILE(TRACE$$) SET(C_PTR);                          00271
          END; /* NOT EOF */                                            00272
    END; /* END OF DO WHILE LOOP */                                     00273
                                                                        00274
    RETURN(CARD);                                                       00275
 END SORT_INPUT;                                                        00276
                                                                        00277
 /**********************************************************************00278
 *                                                                     *00278
 * SEGMENT NAME:                                                       *00278
 *                                                                     *00278
 *    SORT_OUTPUT -- PROCESS SORTED TRACE RECORDS                      *00278
 *                                                                     *00299
 * INPUTS (*TO FUNCTIONS):                                             *00299
 *                                                                     *00279
 *    CARD -- SORTED TRACE RECORD (*1,3,4)                             *00279
 *       THE SORTED TRACE RECORDS, SORTED BY SORT AND CONSTRUCTED BY   *00280
 *       THE SORT INPUT ROUTINE ARE PASSED TO THIS ROUTINE ONE AT AT   *00280
 *       TIME.  THERE IS A TRAILER RECORD OF ALL X'FF' WHICH IS PASSED *00280
 *       IN BUT NOT OUTPUT.                                            *00280
 *                                                                     *00298
 * FUNCTIONS:                                                          *00298
 *                                                                     *00298
 *    1. OVERLAY THE TRACE RECORD WITH THE STRUCTURE OVERLAY           *00298
 *                                                                     *00300
 *    2. IF THERE IS NO TRAILER RECORD, COUNT THE TRAP RECORD.         *00300
 *                                                                     *00302
 *    3. IF THIS TRACE RECORD IS FOR THE SAME STATEMENT AS THE         *00302
 *       PREVIOUS ONE, BUMP THE TRAP COUNT IN THE STATEMENT SUMMARY.   *00302
 *       IF THIS IS FOR A DIFFERENT STATEMENT, OUTPUT THE OLD RECORD   *00302
 *       AND START A NEW ONE.                                          *00302
 *                                                                     *00308
 *    4. IF THIS TRACE RECORD IS FOR THE SAME PROCEDURE AS THE         *00308
 *       PREVIOUS ONE, BUMP THE TRAP COUNT IN THE PROCEDURE SUMMARY.   *00308
 *       IF THIS IS FOR A DIFFERENT PROCEDURE, OUTPUT THE OLD RECORD   *00308
 *       AND START A NEW ONE.                                          *00308
 *                                                                     *00301
 * OUTPUTS (*FROM FUNCTIONS):                                          *00301
 *                                                                     *00292
 *    TRAILER_FOUND -- GLOBAL FLAG (*2)                                *00292
 *       THE TRAILER FOUND FLAG IS SET BY THE SORT_INPUT ROUTINE WHEN  *00293
 *       THE TRAILER RECORD IS ENCOUNTERED.  WHEN THE RECORD IS NOT    *00293
 *       FOUND, WE WANT TO COUNT THE TOTAL NUMBER OF INTERUPTS         *00293
 *       OURSELVES.                                                    *00293
 *                                                                     *00288
 *    WORKOUT -- WORK FILE DD (DDNAME = WORK2) (*3)                    *00288
 *       INTO THIS WORK FILE IS PLACED THE STATMENT SUMMARY RECORDS.   *00289
 *       THESE RECORDS ARE GENERATED ONE PER STATEMENT WITH A COUNT OF *00289
 *       ALL THE TRAPS WHICH OCCURED IN THAT STATEMENT.                *00289
 *                                                                     *00284
 *    WORKOU2 -- WORK FILE DD (DDNAME = WORK1) (*4)                    *00284
 *       INTO THIS WORK FILE IS PLACED THE PROCEDURE SUMMARY RECORDS.  *00285
 *       THESE RECORDS ARE GENERATED ONE PER PROCEDURE WITH A COUNT OF *00285
 *       ALL THE TRAPS WHICH OCCURED IN THAT PROCEDURE.                *00285
 *                                                                     *00314
 **********************************************************************/00314

 SORT_OUTPUT:                                                           00315
    PROCEDURE(CARD);                                                    00316
    DECLARE  CARD    CHAR(80);                                          00317
    DECLARE  LOC_STMT_COUNT   FIXED BINARY(31) STATIC INIT(0);          00318
    DECLARE  PROC_STMT_COUNT  FIXED BINARY(31) STATIC INIT(0);          00319
                                                                        00320
    C_PTR = ADDR(CARD);                                                 00321
    IF ^TRAILER_FOUND                                                   00322
    THEN                                                                00323
       TOTAL_INTERRUPTS = TOTAL_INTERRUPTS + 1;                         00324
                                                                        00325
    /**************************************************************     00326
    *                                                                   00327
    *   COLLECT DATA INTO THE STATEMENT SUMMARY RECORD.  WHEN           00328
    *   THE STATEMENTS CHANGE, OUTPUT THE OLD RECORD AND START          00329
    *   A NEW ONE.  DO NOT OUTPUT THE INITIAL BLANK RECORD.             00330
    *                                                                   00331
    **************************************************************/     00332
    IF CUR$LOC.STMT  ^= LOC_SUMMARY.STMT |                              00333
       CUR$LOC.PROC  ^= LOC_SUMMARY.PROC |                              00334
       CUR$LOC.EXT   ^= LOC_SUMMARY.EXT                                 00335
    THEN                                                                00336
       DO;                                                              00337
          IF LOC_SUMMARY.PROC  ^= ' '                                   00338
          THEN                                                          00339
             DO;                                                        00340
                LOC_SUMMARY.COUNT = LOC_STMT_COUNT;                     00341
                WRITE FILE(WORKOUT) FROM(LOC_SUMMARY);                  00342
             END;                                                       00343
          LOC_SUMMARY.STMT  = CUR$LOC.STMT;                             00344
          LOC_SUMMARY.PROC  = CUR$LOC.PROC;                             00345
          LOC_SUMMARY.EXT   = CUR$LOC.EXT;                              00346
          LOC_STMT_COUNT = 1;                                           00347
       END;                                                             00348
    ELSE                                                                00349
       LOC_STMT_COUNT = LOC_STMT_COUNT + 1;                             00350
                                                                        00351
    /**************************************************************     00352
    *                                                                   00353
    *   COLLECT DATA INTO THE PROCEDURE SUMMARY RECORD.  WHEN           00354
    *   THE PROCEDURES CHANGE, OUTPUT THE OLD RECORD AND START          00355
    *   A NEW ONE.  DO NOT OUTPUT THE INITIAL BLANK RECORD.             00356
    *                                                                   00357
    **************************************************************/     00358
    IF CUR$LOC.PROC  ^= PROC_SUMMARY.PROC  |                            00359
       CUR$LOC.EXT   ^= PROC_SUMMARY.EXT                                00360
    THEN                                                                00361
       DO;                                                              00362
          IF PROC_SUMMARY.PROC ^= ' '                                   00363
          THEN                                                          00364
             DO;                                                        00365
                PROC_SUMMARY.COUNT = PROC_STMT_COUNT;                   00366
                WRITE FILE(WORKOU2) FROM(PROC_SUMMARY);                 00367
             END;                                                       00368
          PROC_SUMMARY.STMT  = ' ';                                     00369
          PROC_SUMMARY.PROC  = CUR$LOC.PROC;                            00370
          PROC_SUMMARY.EXT   = CUR$LOC.EXT;                             00371
          PROC_STMT_COUNT = 1;                                          00372
       END;                                                             00373
    ELSE                                                                00374
       PROC_STMT_COUNT = PROC_STMT_COUNT + 1;                           00375

 END SORT_OUTPUT;                                                       00376
 END INITIAL_SORT_AND_HEADERS;                                          00377
                                                                        00378
 PRODUCE_PROC_REPORT:                                                   00379
    PROCEDURE;                                                          00380
    DECLARE  RC           FIXED BINARY(31) AUTO;                        00381
    DECLARE  LAST_PROC    CHAR(08) AUTO INIT(' ');                      00382
    DECLARE  INT_COUNT    FIXED BINARY(31) AUTO INIT(0);                00383
    DECLARE  PERCENT      FIXED BINARY(31) AUTO INIT(0);                00384
    DECLARE  PERCENT_PIC  PIC'ZZZZZZ9.9'   AUTO;                        00385
    DECLARE  FIRST_PAGE   BIT(1) AUTO ALIGNED INIT('1'B);               00386
    DECLARE  PROC_WORK1   VARYING CHAR(31) AUTO;                        00387
    DECLARE  PROC_WORK2           CHAR(31) AUTO;                        00388
                                                                        00389
    ON ENDPAGE(REPORT)                                                  00390
    BEGIN;                                                              00391
       IF TERM_FORMAT                                                   00392
       THEN                                                             00393
          DO;                                                           00394
             IF FIRST_PAGE                                              00395
             THEN                                                       00396
                DO;                                                     00397
                   PUT FILE(REPORT) PAGE LIST(STARS_80);                00398
                   PUT FILE(REPORT) SKIP EDIT(                          00399
                       'SUMMARY OF TIME SPENT IN EACH PROC FOR PGM ',   00400
                       LOC_HEADER.LOAD)                                 00401
                       (A);                                             00402
                   PUT FILE(REPORT) SKIP LIST(' ');                     00403
                   PUT FILE(REPORT) SKIP LIST(STARS_80);                00404
                   PUT FILE(REPORT) SKIP EDIT(                          00405
                      'PROC       TRAP COUNT  %TOTAL ',                 00406
                      'TOTAL PERCENTAGE GRAPH,  * = 1%')(A,COL(50),A);  00407
                   PUT FILE(REPORT) SKIP LIST(' ');                     00408
                END;                                                    00409
             FIRST_PAGE = '0'B;                                         00410
          END;                                                          00411
       ELSE                                                             00412
          DO;                                                           00413
             IF PAGE# ^= 1                                              00414
             THEN                                                       00415
                PUT FILE(REPORT) PAGE EDIT(                             00416
                'SUMMARY OF TIME SPENT IN EACH PROC FOR PGM ',          00417
                 LOC_HEADER.LOAD,                                       00418
                'PAGE ',PAGE#)(A,A,COL(65),A,A);                        00419
             ELSE                                                       00420
                PUT FILE(REPORT) SKIP EDIT(                             00421
                'SUMMARY OF TIME SPENT IN EACH PROC FOR PGM ',          00422
                 LOC_HEADER.LOAD,                                       00423
                'PAGE ',PAGE#)(A,A,COL(65),A,A);                        00424
             PUT FILE(REPORT) SKIP LIST(' ');                           00425
             PUT FILE(REPORT) SKIP EDIT(                                00426
                'PROC       TRAP COUNT  %TOTAL ',                       00427
                'TOTAL PERCENTAGE GRAPH,  * = 1%')(A,COL(50),A);        00428
             PUT FILE(REPORT) SKIP LIST(' ');                           00429
          END;                                                          00430
       PAGE# = PAGE# + 1;                                               00431
    END; /* END OF ENDPAGE UNIT */                                      00432
                                                                        00433
    OPEN FILE(WORKIN) RECORD INPUT TITLE('WORK2');                      00434
    EOF_WORKIN = '0'B;                                                  00435
    READ FILE(WORKIN) SET(P_PTR);                                       00436
                                                                        00437
    SIGNAL ENDPAGE(REPORT);                                             00438
                                                                        00439
    DO WHILE(^EOF_WORKIN);                                              00440
       PERCENT = (1000 * PROC_SUMMARY.COUNT) / TOTAL_INTERRUPTS;        00441
       PERCENT_PIC = PERCENT;                                           00442
       PROC_WORK1 = TRIMX(PROC_SUMMARY.PROC);                           00443
       PROC_WORK2 = PROC_WORK1 || '(' || TRIMX(PROC_SUMMARY.EXT) || ')';00444
       PUT FILE(REPORT) SKIP EDIT(PROC_WORK2,                           00445
                                  PROC_SUMMARY.COUNT,                   00446
                                  PERCENT_PIC,                          00447
                                  SUBSTR(STARS,1,((PERCENT+5)/10)))     00448
                             (A,X(1),A,A,X(1),A);                       00449
       READ FILE(WORKIN) SET(P_PTR);                                    00450
    END;                                                                00451
                                                                        00452
    CLOSE FILE(WORKIN);                                                 00453
    PUT FILE(REPORT) SKIP LIST(' ');                                    00454

 END PRODUCE_PROC_REPORT;                                               00455


 PRODUCE_BLOCK_REPORT:                                                  00456
    PROCEDURE;                                                          00457
    DECLARE  RC           FIXED BINARY(31) AUTO;                        00458
    DECLARE  LAST_PROC    CHAR(31) AUTO INIT(' ');                      00459
    DECLARE  LAST_EXT     CHAR(8)  AUTO INIT(' ');                      00460
    DECLARE  INT_COUNT    FIXED BINARY(31) AUTO INIT(0);                00461
    DECLARE  PERCENT      FIXED BINARY(31) AUTO INIT(0);                00462
    DECLARE  PERCENT_PIC  PIC'ZZZZZZ9.9'   AUTO;                        00463
    DECLARE  FIRST_PAGE   BIT(1) AUTO ALIGNED INIT('1'B);               00464
                                                                        00465
    ON ENDPAGE(REPORT)                                                  00466
    BEGIN;                                                              00467
       IF TERM_FORMAT                                                   00468
       THEN                                                             00469
          DO;                                                           00470
             IF FIRST_PAGE                                              00471
             THEN                                                       00472
                DO;                                                     00473
                   PUT FILE(REPORT) PAGE LIST(STARS_80);                00474
                   PUT FILE(REPORT) SKIP EDIT(                          00475
                       'TIME SPENT IN STATEMENTS, BY PROC FOR PGM ',    00476
                       LOC_HEADER.LOAD)                                 00477
                       (A);                                             00478
                END;                                                    00479
             PUT FILE(REPORT) SKIP LIST(' ');                           00480
             PUT FILE(REPORT) SKIP LIST(STARS_80);                      00481
             FIRST_PAGE = '0'B;                                         00482
          END;                                                          00483
       ELSE                                                             00484
          DO;                                                           00485
             IF PAGE# ^= 1                                              00486
             THEN                                                       00487
                PUT FILE(REPORT) PAGE EDIT(                             00488
                'TIME SPENT IN STATEMENTS, BY PROC FOR PGM ',           00489
                LOC_HEADER.LOAD,                                        00490
                'PAGE ',PAGE#)(A,A,A,COL(65),A,A);                      00491
             ELSE                                                       00492
                PUT FILE(REPORT) SKIP EDIT(                             00493
                'TIME SPENT IN STATEMENTS, BY PROC FOR PGM ',           00494
                LOC_HEADER.LOAD,                                        00495
                'PAGE ',PAGE#)(A,A,A,COL(65),A,A);                      00496
             PUT FILE(REPORT) SKIP LIST(' ');                           00497
          END;                                                          00498
       PUT FILE(REPORT) SKIP EDIT('PROC ',                              00499
          TRIMX(LOC_SUMMARY.PROC),                                      00500
          ' IN EXTERNAL PROC ',LOC_SUMMARY.EXT)(A);                     00501
       PUT FILE(REPORT) SKIP LIST(' ');                                 00502
       PUT FILE(REPORT) SKIP EDIT(                                      00503
          'STATEMENT  TRAP COUNT  %TOTAL ',                             00504
          'TOTAL PERCENTAGE GRAPH,  * = 1%')(A,COL(50),A);              00505
       PUT FILE(REPORT) SKIP LIST(' ');                                 00506
       PAGE# = PAGE# + 1;                                               00507
    END; /* ENDPAGE UNIT */                                             00508
                                                                        00509
    OPEN FILE(WORKIN) RECORD INPUT TITLE('WORK1');                      00510
    EOF_WORKIN = '0'B;                                                  00511
    READ FILE(WORKIN) SET(L_PTR);                                       00512
                                                                        00513
    DO WHILE(^EOF_WORKIN);                                              00514
       IF LAST_PROC ^= LOC_SUMMARY.PROC                                 00515
       THEN                                                             00516
          DO;                                                           00517
             IF LAST_PROC ^= ' '                                        00518
             THEN                                                       00519
                DO;                                                     00520
                   PERCENT = (1000 * INT_COUNT) / TOTAL_INTERRUPTS;     00521
                   PUT FILE(REPORT) SKIP LIST(' ');                     00522
                   PUT FILE(REPORT) SKIP EDIT(                          00523
                       'TOTAL INTERRUPTS THIS PROC: ',INT_COUNT)        00524
                       (A,F(8));                                        00525
                   PERCENT_PIC = PERCENT;                               00526
                   PUT FILE(REPORT) SKIP EDIT(                          00527
                       'THIS PROC CONSUMED ',PERCENT_PIC,               00528
                       ' OF THE TOTAL CPU TIME')(A);                    00529
                   PUT FILE(REPORT) SKIP LIST(' ');                     00530
                END;                                                    00531
             SIGNAL ENDPAGE(REPORT);                                    00532
             INT_COUNT = 0;                                             00533
             LAST_PROC = LOC_SUMMARY.PROC;                              00534
             LAST_EXT  = LOC_SUMMARY.EXT;                               00535
          END;                                                          00536
                                                                        00537
       PERCENT = (1000 * LOC_SUMMARY.COUNT) / TOTAL_INTERRUPTS;         00538
       PERCENT_PIC = PERCENT;                                           00539
       PUT FILE(REPORT) SKIP EDIT(LOC_SUMMARY.STMT,                     00540
                                  LOC_SUMMARY.COUNT,                    00541
                                  PERCENT_PIC,                          00542
                                  SUBSTR(STARS,1,((PERCENT+5)/10)))     00543
                             (A,X(4),A,A,COL(36),A);                    00544
       INT_COUNT = INT_COUNT + LOC_SUMMARY.COUNT;                       00545
       READ FILE(WORKIN) SET(L_PTR);                                    00546
    END;                                                                00547
    IF LAST_PROC ^= ' '                                                 00548
    THEN                                                                00549
       DO;                                                              00550
          PERCENT = (1000 * INT_COUNT) / TOTAL_INTERRUPTS;              00551
          PUT FILE(REPORT) SKIP LIST(' ');                              00552
          PUT FILE(REPORT) SKIP EDIT(                                   00553
              'TOTAL INTERRUPTS THIS PROC: ',INT_COUNT)                 00554
              (A,F(8));                                                 00555
          PERCENT_PIC = PERCENT;                                        00556
          PUT FILE(REPORT) SKIP EDIT(                                   00557
              'THIS PROC CONSUMED ',PERCENT_PIC,                        00558
              ' OF THE TOTAL CPU TIME')(A);                             00559
          PUT FILE(REPORT) SKIP LIST(' ');                              00560
       END;                                                             00561
    CLOSE FILE(WORKIN);                                                 00562

 END PRODUCE_BLOCK_REPORT;                                              00563


                                                                        00564
 /**********************************************************************00565
 *                                                                     *00565
 * SEGMENT NAME:                                                       *00565
 *                                                                     *00565
 *    RIGHT_ADJUST -- RIGHT ADJUST A STRING WITHIN A FIXED LENGTH      *00565
 *       FIELD.                                                        *00565
 *                                                                     *00578
 * INPUTS (*TO FUNCTIONS):                                             *00578
 *                                                                     *00566
 *    STRING -- INPUT STRING TO BE ADJUSTED (*1,2,3)                   *00566
 *       THE FIRST PARM TO THIS ROUTINE IS A STRING WHICH IS TO BE     *00567
 *       RIGHT ADJUSTED.                                               *00567
 *                                                                     *00569
 *    LEN -- LENGTH OF THE FIXED LENGTH FIELD (*2,3)                   *00569
 *       THE LENGTH OF THE FIELD INTO WHICH THE PASSED STRING IS TO BE *00570
 *       ADJUSTED IS THE SECOND PARM TO THIS STRING.                   *00570
 *                                                                     *00577
 * FUNCTIONS:                                                          *00577
 *                                                                     *00577
 *    1. TRIM LEADING AND TRAILING BLANKS OFF THE INPUT STRING         *00577
 *                                                                     *00579
 *    2. IF THE STRING IS LONGER THAN THE FIELD LENGTH, TRUNCATE IT TO *00579
 *       THIS LENGTH.                                                  *00579
 *                                                                     *00584
 *    3. PAD THE INPUT STRING ON THE LEFT WITH ENOUGH BLANKS TO MAKE   *00584
 *       IT THE LENGTH SPECIFIED IN THE LENGTH PARMATER.               *00584
 *                                                                     *00583
 * OUTPUTS (*FROM FUNCTIONS):                                          *00583
 *                                                                     *00572
 *    RET -- RETURNED STRING (*2,3)                                    *00572
 *       THE RETURNED VALUE OF THIS FUNCTION IS THE INPUT STRING       *00573
 *       PADDED ON THE LEFT WITH BLANKS TO THE LENGTH INIDICATED IN    *00573
 *       THE LENGTH PARM.                                              *00573
 *                                                                     *00589
 **********************************************************************/00589

 RIGHT_ADJUST:                                                          00590
    PROCEDURE(STRING,LEN) RETURNS(VARYING CHAR(80));                    00591
    DECLARE  STRING   CHAR(*);                                          00592
    DECLARE  LEN      FIXED BINARY(15);                                 00593
    DECLARE  WORK     VARYING CHAR(80) AUTO;                            00594
    DECLARE  BLANKS   CHAR(80) INIT(' ');                               00595
    DECLARE  I        FIXED BINARY(15) AUTO;                            00596
    WORK = TRIMX((STRING));                                             00597
    IF LENGTH(WORK) >= LEN                                              00598
    THEN                                                                00599
       WORK = SUBSTR(WORK,1,LEN);                                       00600
    ELSE                                                                00601
       WORK = SUBSTR(BLANKS,1,LEN-LENGTH(WORK)) || WORK;                00602
    RETURN(WORK);                                                       00603
 END RIGHT_ADJUST;                                                      00604
                                                                        00605

 /**********************************************************************00606
 *                                                                     *00606
 * SEGMENT NAME:                                                       *00606
 *                                                                     *00606
 *    TRIM -- SEGMENTS TRIM AND TRIMX                                  *00606
 *                                                                     *00611
 * INPUTS (*TO FUNCTIONS):                                             *00611
 *                                                                     *00607
 *    FIX_STR -- INPUT STRING (*1,2)                                   *00607
 *                                                                     *00609
 * FUNCTIONS:                                                          *00609
 *                                                                     *00609
 *    1. FUNCTION TRIM REMOVES TRAILING BLANKS ASSUMING THAT THE DATA  *00609
 *       IS LEFT JUSTIFIED AND CONTAINS NO IMBEDDED BLANKS.            *00609
 *                                                                     *00613
 *    2. FUNCTION TRIMX REMOVES LEADING AND TRAILING BLANKS.  IMBEDDED *00613
 *       BLANKS ARE ACCEPTABLE.                                        *00613
 *                                                                     *00612
 * OUTPUTS (*FROM FUNCTIONS):                                          *00612
 *                                                                     *00608
 *    OUT_STR -- RETURNED OUTPUT STRING (*1,2)                         *00608
 *                                                                     *00617
 **********************************************************************/00617

 TRIM:                                                                  00618
    PROCEDURE(FIX_STR) RETURNS(VARYING CHAR(80));                       00619
  DECLARE FIX_STR  CHAR(*);                                             00620
  DECLARE I        FIXED BINARY(15) AUTO;                               00621
  I = INDEX(FIX_STR,' ');                                               00622
  IF I = 0                                                              00623
  THEN                                                                  00624
     RETURN(FIX_STR);                                                   00625
  ELSE                                                                  00626
     RETURN(SUBSTR(FIX_STR,1,I-1));                                     00627
 END TRIM;                                                              00628

 TRIMX:                                                                 00629
  PROCEDURE(FIX_STR)  RETURNS(VARYING CHAR(256));                       00630
  DECLARE FIX_STR           CHAR(*);                                    00631
  DECLARE INSTR     VARYING CHAR(256) AUTO;                             00632
  DECLARE I         FIXED BIN(15);                                      00633

 /**********************************************************************00634
 *                                                                     *00634
 * TRIM LEADING AND TRAILING BLANKS                                    *00634
 *                                                                     *00636
 **********************************************************************/00636
   INSTR = FIX_STR;                                                     00637
  I = VERIFY(INSTR,' ');                                                00638
  IF  I = 0                                                             00639
  THEN                                                                  00640
     IF INDEX(INSTR,' ') = 0                                            00641
     THEN                                                               00642
        RETURN(INSTR);                                                  00643
     ELSE                                                               00644
        RETURN('');                                                     00645
  RETURN(SUBSTR(INSTR,I,LENGTH(INSTR) - (I-1) -                         00646
                (VERIFY(REVERSE(INSTR),' ')-1)) );                      00647

 END TRIMX;                                                             00648

 /**********************************************************************00001
 *                                                                     *00002
 *                      SUBSET FG500299.ASETDCLS                       *00002
 *                                                                     *00003
 * MASTER LIST COMMON DECLARATIONS                                     *00003
 *                                                                     *00004
 * EXTERNAL VARIABLE SYSENV IS SET TO THE VALUE 'FORE' FOR FORGROUND   *00004
 * OPERATION AND 'BACK' FOR BACKGROUND (BATCH JOB) OPERATION.  FOR     *00004
 * INTERACTIVE SPF DIALOGS, THE VALUE 'SPF' CAN BE USED TO CAUSE THE   *00004
 * ERROR ROUTINE TO FILL IN THE SPFMSGS ARRAY INSTEAD OF WRITING TO    *00004
 * FILE PRINT.                                                         *00004
 *                                                                     *00009
 * EXTERNAL VARIABLE LOGONID IS ALWAYS INITIALIZED BY THE INITIALIZE   *00009
 * ROUTINE TO THE CURRENT USERID.  IT IS USED IN OUT_ENT TO MARK THE   *00009
 * USER WHO LAST UPDATED ANY PARTICULAR RECORD.                        *00009
 *                                                                     *00013
 * QUIET IS SET TO TRUE WHEN INFORMATORY MESSAGES ARE TO BE            *00013
 * SUPPRESSED.                                                         *00013
 *                                                                     *00015
 **********************************************************************/00015
                                                                        00016
 DEFAULT RANGE(*) ALIGNED FIXED BINARY STATIC,                          00017
                  DESCRIPTORS ALIGNED;                                  00018
                                                                        00019

 /**********************************************************************00001
 *                                                                     *00001
 *                       SUBSET FG500299.BUILTIN                       *00001
 *                                                                     *00002
 *                                                                     *00003
 *                       BUILTIN PL/I FUNCTIONS                        *00003
 *                                                                     *00003
 **********************************************************************/00003
                                                                        00016
 DECLARE (ABS,                                                          00004
          ADDR,                                                         00005
          ALLOCATION,                                                   00006
          ANY,                                                          00007
          BIT,                                                          00008
          BINARY,                                                       00009
          CHAR,                                                         00010
          COMPLETION,                                                   00011
          DATE,                                                         00012
          DATETIME,                                                     00013
          DIM,                                                          00014
          DECIMAL,                                                      00015
          EMPTY,                                                        00016
          FIXED,                                                        00017
          HBOUND,                                                       00018
          HIGH,                                                         00019
          INDEX,                                                        00020
          LBOUND,                                                       00021
          LENGTH,                                                       00022
          LINENO,                                                       00023
          LOW,                                                          00024
          MAX,                                                          00025
          MIN,                                                          00026
          MOD,                                                          00027
          NULL,                                                         00028
          ONCODE,                                                       00029
          ONKEY,                                                        00030
          PLIRETC,                                                      00031
          PLIRETV,                                                      00032
          PLISRTA,                                                      00033
          PLISRTB,                                                      00034
          PLISRTC,                                                      00035
          PLISRTD,                                                      00036
          REPEAT,                                                       00037
          ROUND,                                                        00038
          SAMEKEY,                                                      00039
          STATUS,                                                       00040
          STG,                                                          00041
          STORAGE,                                                      00042
          STRING,                                                       00043
          SUBSTR,                                                       00044
          TIME,                                                         00045
          TRANSLATE,                                                    00046
          TRUNC,                                                        00047
          UNSPEC,                                                       00048
          VERIFY)            BUILTIN;                                   00049
                                                                        00021
                                                                        00027
 /**********************************************************************00001
 *                                                                     *00002
 *                           SUBSET LINKDTE                            *00002
 *                                                                     *00003
 * DECLARATION FOR THE LINK DATE INFORMATION BUILD BY THE LINKDATE     *00003
 * PROGRAM AND LINKED WITH THIS PROGRAM.                               *00003
 *                                                                     *00005
 * LINKDTE IS A SPECIAL VARIABLE SET UP BY THE LINKDATE PROGRAM WHICH  *00005
 * IS PART OF THE RELEASE PROCEDURE AND THE MDLKED CATALOGUED          *00005
 * PROCEDURE.  THE LINKDATE PROGRAM GENERATES AN EXTERNAL VARIABLE     *00005
 * NAMED LINKDTE WHICH CONTAINS THE CURRENT DATE IN MM/DD/YY FORMAT.   *00005
 * NOTE: THAT WHEN USING LINKDTE YOU MUST ALWAYS INCLUDE THE ENTRY     *00005
 * PLISTART CARD AS LINKDTE IS THE FIRST CSECT AND WOULD BECOME THE    *00005
 * DEFAULT ENTRY POINT.                                                *00005
 *                                                                     *00012
 **********************************************************************/00012
                                                                        00027
    DECLARE  01  LINKDTE  STATIC EXTERNAL ALIGNED,                      00013
                 02    HEADER_JUNK    CHAR(8) INIT(' '),                00014
                 02    LINK_DATE      VARYING CHAR(30) INIT('UNKNOWN'); 00015

 /**********************************************************************00001
 *                                                                     *00002
 *                           SUBSET REVERSE                            *00002
 * DECLARATION FOR FUNCTION REVERSE                                    *00003
 * THIS ROUTINE WILL RETURN THE STRING PASSED IN REVERSE ORDER, E.I.   *00004
 * WITH THE FIRST CHARACTER LAST, ETC.                                 *00004
 *                                                                     *00006
 * BACKWARD_STRING = REVERSE(STRING)                                   *00006
 *                                                                     *00007
 * SOURCE IS IN FG500242                                               *00007
 *                                                                     *00008
 **********************************************************************/00008

    DECLARE REVERSE ENTRY(VARYING CHAR(*))                              00009
                    RETURNS(VARYING CHAR(256)) EXTERNAL;                00010

 END PLEAREP;                                                           00652
