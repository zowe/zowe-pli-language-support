*PROCESS MAR(2,72,1);
 /**********************************************************************
 *
 *  PROGRAM PLEA - PL/I EXECUTION ANALYZER
 *
 *  THIS PROGRAM PERFORMS CPU OR WALL TIME PERFORMANCE ANALYSIS ON
 *  APPLICATION PROGRAMS WRITTEN IN PL/I.  THE VERSION 2 PL/I COMPILER
 *  MUST BE USED IN THE APPLICATION.  THE PROGRAM MUST HAVE BEEN
 *  COMPILED WITH THE TEST(STMT) OR TEST(ALL) AND GS OPTIONS.
 *
 *
 *   //SAMPLE EXEC PGM=PLEA,
 *   //   PARM='/A1,1,TASK,NOSPIE/PGMPARMS'
 *               |  |  |     |     |
 *               |  |  |     |     +- PARMS TO YOUR PROGRAM
 *               |  |  |     +------- PL/I PARMS FOR YOUR PGM
 *               |  |  +------------- SAMPLE CPU TIME
 *               |  |                 SPECIFY REAL FOR WALL TIME SAMPLES
 *               |  +---------------- SAMPLE EVERY 1/100 SECOND
 *               +------------------- NAME OF PROGRAM TO EXECUTE
 *   //STEPLIB  DD DSN=YOUR.NORMAL.STEPLIBS,DISP=SHR
 *   //         DD DSN=YOUR.PLEA.LOAD,DISP=SHR
 *   //         DD DSN=EQAW.SEQAMOD,DISP=SHR
 *         YOUR.PLEA.LOAD CAN BE THE FIRST OR LAST STEPLIB,
 *         EQAW.SEQAMOD IS REQUIRED IF IT IS NOT IN THE LINK LIST
 *
 *                       PLEA WORK DATASETS
 *
 *   //CMD$FILE DD  UNIT=SYSVIO,SPACE=(TRK,1),
 *   //             DCB=(LRECL=80,RECFM=FB,BLKSIZE=3200)
 *   //PLEAPRNT DD  SYSOUT=*
 *   //SYSUDUMP DD  SYSOUT=*
 *
 *        THE SAMPLES END UP IN THE FOLLOWING DATASET
 *
 *   //TRACE$$  DD  DSN=QC22505.TRACE.DATA,
 *   //             DISP=(NEW,CATLG),UNIT=SYSDA,SPACE=(CYL,(50,20),RLSE)
 *
 *
 *
 *
 *
 *
 **********************************************************************/

 PLEA:
    PROCEDURE(MAINPARM) OPTIONS(MAIN) REORDER;
    DECLARE  MAINPARM    VARYING CHAR(100);
    DECLARE  CARD        CHAR(80);
    DECLARE  SYSPRINT    FILE PRINT;
    DECLARE  CMDFILE     FILE RECORD OUTPUT
                         ENV(TOTAL,RECSIZE(80),FB,BLKSIZE(9040));
    DECLARE  CMDFILE_DD  VARYING CHAR(8) STATIC INIT('CMD$FILE');
    DECLARE  RC          FIXED BINARY(31) AUTO INIT(0);
    DECLARE  I           FIXED BINARY(31) AUTO;
    DECLARE  J           FIXED BINARY(31) AUTO;
    DECLARE  REASON(2)   FIXED BINARY(15) AUTO;
    DECLARE  ABEND_CODE  VARYING CHAR(5)  AUTO;
    DECLARE  1  CUR$LOC  AUTO,
                2  STMT    CHAR(8)         INIT('        '),
                2  PROC    CHAR(31)        INIT('        ');
    DECLARE  1  LOC_HEADER   AUTO,
                2  STMT    CHAR(8)         INIT(' '),
                2  HEADER  CHAR(4)         INIT(' '),
                2  LOAD    CHAR(8)         INIT(' '),
                2  TYPE    CHAR(4)         INIT(' '),
                2  INT     PIC'ZZZZZZ99'   INIT(0),
                2  SPARE   CHAR(15)        INIT(' ');
    DECLARE  1  LOC_TRAILER  AUTO,
                2  STMT    CHAR(8)         INIT(' '),
                2  HEADER  CHAR(4)         INIT(' '),
                2  SP1     CHAR(2)         INIT(' '),
                2  COUNT   PIC'ZZZZZZZ9'   INIT(0),
                2  MINUTES PIC'ZZZZZZZ9'   INIT(0),
                2  STMTS   PIC'ZZZZZZZZ9'  INIT(0),
                2  SPARE   CHAR(8)         INIT(' ');
    DECLARE  LOC_HEADER_PTR    POINTER AUTO INIT(ADDR(LOC_HEADER));
    DECLARE  LOC_TRAILER_PTR   POINTER AUTO INIT(ADDR(LOC_TRAILER));
    DECLARE  REC_LOC      CHAR(8) AUTO;
    DECLARE  C            CHAR(1) AUTO;
    DECLARE  COUNT        FIXED BINARY(31) AUTO INIT(0);
    DECLARE  STMTS        FIXED BINARY(31) AUTO INIT(0);
    DECLARE  PROGRAM      CHAR(8)  AUTO;
    DECLARE  OS_PARM      VARYING CHAR(256) AUTO;
    DECLARE  SAMPLE_TYPE  VARYING CHAR(30)  AUTO;
    DECLARE  TIMEINT      FIXED BINARY(31)  AUTO;
    DECLARE  TIMEING_TYPE  CHAR(4)           AUTO INIT(' ');
    DECLARE  TYPE_REAL_TIME CHAR(4)  STATIC INIT('REAL');
    DECLARE  TYPE_CPU_TIME  CHAR(4)  STATIC INIT('CPU ');
    DECLARE  START_TIME     CHAR(6)  AUTO;
    DECLARE  STOP_TIME      CHAR(6)  AUTO;
    DECLARE  PLITEST_CMDS(15) CHAR(80) INIT(
           ' DECLARE P12 POINTER;                 ',
           ' DECLARE A12(150) POINTER BASED;      ',
           ' DECLARE C12(512) CHAR(1) BASED;      ',
           ' P12 = %GPR12;                        ',
           ' P12->A12(106) = ''XXXXXXXX''PX;      ',
           ' P12->C12(429) = ''45''X;             ',
           ' P12->C12(430) = ''C0''X;             ',
           ' AT STATEMENT * DO;                   ',
           ' P12 = %GPR12;                        ',
           ' DIM = P12->A12(106);                 ',
           ' P12->A12(106) = ''XXXXXXXX''PX;      ',
           ' P12->C12(429) = ''45''X;             ',
           ' P12->C12(430) = ''C0''X;             ',
           ' GO;                                  ',
           ' END;                                 ');
    OPEN FILE(SYSPRINT) TITLE('PLEAPRNT') OUTPUT;
    PUT FILE(SYSPRINT) SKIP EDIT('PLEA - PL/I EXECUTION ANALYZER',
                                 'RELEASE 2.4 AS OF ',
                                 LINKDTE.LINK_DATE)(A,X(1),A,A);
    SAMPLE_TYPE = 'SAMPLING CPU TIME';
    TIMEING_TYPE = TYPE_CPU_TIME;
    I = INDEX(MAINPARM,',');
    IF I ^= 0
    THEN
       DO;
          PROGRAM = SUBSTR(MAINPARM,1,I-1);
          MAINPARM = SUBSTR(MAINPARM,I+1);
          TIMEINT = 0;
          C = SUBSTR(MAINPARM,1,1);
          DO WHILE(VERIFY(C,'0123456789') = 0);
             TIMEINT = TIMEINT * 10 + FIXED(C);
             MAINPARM = SUBSTR(MAINPARM,2);
             C = SUBSTR(MAINPARM,1,1);
          END;
          IF C = ','
          THEN
             MAINPARM = SUBSTR(MAINPARM,2);
          IF SUBSTR(MAINPARM,1,4) = 'REAL'
          THEN
             DO;
                TIMEING_TYPE = TYPE_REAL_TIME;
                SAMPLE_TYPE = 'SAMPLING REAL TIME';
                MAINPARM = SUBSTR(MAINPARM,5);
                IF SUBSTR(MAINPARM,1,1) = ','
                THEN
                   MAINPARM = SUBSTR(MAINPARM,2);
             END;
          IF SUBSTR(MAINPARM,1,4) = 'TASK'
          THEN
             DO;
                TIMEING_TYPE = TYPE_CPU_TIME;
                SAMPLE_TYPE = 'SAMPLING CPU TIME';
                MAINPARM = SUBSTR(MAINPARM,5);
                IF SUBSTR(MAINPARM,1,1) = ','
                THEN
                   MAINPARM = SUBSTR(MAINPARM,2);
             END;

          OS_PARM = 'TEST(NONE,,''USE '||
                    CMDFILE_DD || ';GO;'')'||MAINPARM;
          IF TIMEINT = 0
          THEN
             TIMEINT = 3;
       END;
    ELSE
       DO;
          PROGRAM = MAINPARM;
          OS_PARM = 'TEST(NONE,,''USE '||
                    CMDFILE_DD || ';GO;'')';
          TIMEINT = 3;
       END;
    PUT FILE(SYSPRINT) SKIP(2) EDIT(
                       'RUNNING PROGRAM: ',PROGRAM)(A,A);
    PUT FILE(SYSPRINT) SKIP(1) EDIT(
                       SAMPLE_TYPE)(A);
    PUT FILE(SYSPRINT) SKIP(1) EDIT(
                      'SAMPLE TAKEN EVERY ',TIMEINT,'/100 OF A SECOND')
                       (A,F(5),A);
    PUT FILE(SYSPRINT) SKIP(1) EDIT(
                       'USING PARM: ',OS_PARM)(A,A);
    PUT FILE(SYSPRINT) SKIP(1) EDIT(
        'NOTE: PROGRAM MUST BE COMPILED WITH VERSION 2 PL/I')(A);
    PUT FILE(SYSPRINT) SKIP(1) EDIT(
        '      PROGRAM MUST BE COMPILED OPTION TEST(STMT) OR TEST(ALL)')
        (A);
    PUT FILE(SYSPRINT) SKIP(1) EDIT(
        '      PROGRAM SHOULD BE COMPILED OPTION GOSTMT')
        (A);
    IF PROGRAM = ' '
    THEN
       DO;
           PUT FILE(SYSPRINT) SKIP(1) EDIT('NO PROGRAM NAME SPECIFIED')
                                          (A);
           CALL PLIRETC(16);
           RETURN;
       END;

    OPEN FILE(CMDFILE) TITLE(CMDFILE_DD) RECORD OUTPUT;
    GETSAMP_LOC  = HEX(GETSAMP_BIN);
    DO I = 1 TO HBOUND(PLITEST_CMDS,1);
       J = INDEX(PLITEST_CMDS(I),'XXXXXXXX');
       IF J > 0
       THEN
          SUBSTR(PLITEST_CMDS(I),J,8) = GETSAMP_LOC;
       WRITE FILE(CMDFILE) FROM(PLITEST_CMDS(I));
    END;
    CLOSE FILE(CMDFILE);
    LOC_HEADER.STMT   = '        ';
    LOC_HEADER.HEADER = '+++1';
    LOC_HEADER.LOAD   = PROGRAM;
    LOC_HEADER.TYPE   = TIMEING_TYPE;
    LOC_HEADER.INT    = TIMEINT;
    ON ERROR
    BEGIN;
       LOC_TRAILER.STMT    = ' ';
       LOC_TRAILER.HEADER  = '+++2';
       LOC_TRAILER.COUNT   = COUNT;
       LOC_TRAILER.STMTS   = STMTS;
       CALL STOPSAM(LOC_TRAILER_PTR);
    END;
    START_TIME = SUBSTR(TIME(),1,6);
    CALL SAMPLER(COUNT,STMTS,LOC_HEADER_PTR,TIMEINT,TIMEING_TYPE,
                 PROGRAM,OS_PARM,RC);
    STOP_TIME  = SUBSTR(TIME(),1,6);
    LOC_TRAILER.STMT    = ' ';
    LOC_TRAILER.HEADER  = '+++2';
    LOC_TRAILER.COUNT   = COUNT;
    LOC_TRAILER.STMTS   = STMTS;
    LOC_TRAILER.MINUTES = SUBTRACT_TIME(START_TIME,STOP_TIME);
    CALL STOPSAM(LOC_TRAILER_PTR);
    PUT FILE(SYSPRINT) SKIP EDIT('PROGRAM ',PROGRAM,
                                 ' ENDED, RC = ',RC)
                                 (A,A,A,F(8));
    CALL PLIRETC(RC);
    PUT FILE(SYSPRINT) SKIP EDIT(COUNT,' SAMPLES TAKEN')
                                 (F(9),A);
    PUT FILE(SYSPRINT) SKIP EDIT(STMTS,' PL/I STATEMENTS EXECUTED')
                                 (F(9),A);
    RETURN;
1
 /**********************************************************************
 *                                                                     *
 * SEGMENT NAME:                                                       *
 *                                                                     *
 *    SUBTRACT_TIME -- CALCULATE A TIME INTERVAL BASED ON TO CLOCK     *
 *       TIMES                                                         *
 *                                                                     *
 * INPUTS (*TO FUNCTIONS):                                             *
 *                                                                     *
 *    START_TIME -- START OF TIME INTERVAL TO BE CALCULATED (*1)       *
 *       THE FIRST PARM TO THIS ROUTINE IS THE STARTING TIME OF THE    *
 *       INTERVAL TO BE CALCULATED IN THE FORM HHMMSS.                 *
 *                                                                     *
 *    STOP_TIME -- STOP OF TIME INTERVAL TO BE CALCULATED (*1)         *
 *       THE SECOND PARM TO THIS ROUTINE IS THE ENDING TIME OF THE     *
 *       INTERVAL TO BE CALCULATED IN THE FORM HHMMSS.                 *
 *                                                                     *
 * FUNCTIONS:                                                          *
 *                                                                     *
 *    1. CALCULATE THE NUMBER OF SECONDS, MINUTES, AND HOURS BETWEEN   *
 *       THE START AND STOP TIMES, CARRYING WHEN NECESSARY.            *
 *                                                                     *
 *    2. ROUND THE TIME INTERNVAL TO THE NEAREST MINUTES.  ALWAYS      *
 *       RETURN AT LEAST 1 MINUTE.                                     *
 *                                                                     *
 * OUTPUTS (*FROM FUNCTIONS):                                          *
 *                                                                     *
 *    INTERVAL -- INTERVAL IN MINUTES. (*2)                            *
 *       THE RETURNED PICTURE VARIABLE IS THE NUMBER OF MINUTES        *
 *       BETWEEN THE START TIME AND THE STOP TIME ROUNDED TO THE       *
 *       CLOSEST MINUTE.  THE MINIMUM VALUE RETURNED IN 1.             *
 *                                                                     *
 **********************************************************************/

 SUBTRACT_TIME:
    PROCEDURE(START_TIME,STOP_TIME) RETURNS(PIC'ZZZZZZZ9');
    DECLARE  START_TIME    CHAR(*);
    DECLARE  STOP_TIME     CHAR(*);
    DECLARE  01  START_OVLY BASED(ADDR(START_TIME)),
                 02  HH    PIC'99',
                 02  MM    PIC'99',
                 02  SS    PIC'99';
    DECLARE  01  STOP_OVLY  BASED(ADDR(STOP_TIME)),
                 02  HH    PIC'99',
                 02  MM    PIC'99',
                 02  SS    PIC'99';
    DECLARE  DIFF_MINUTES  PIC'ZZZZZZZ9' AUTO;
    /* TAKE CARE OF CROSSING DATE BOUNDARY        */
    /* NO MODULE TAKES MORE THAN 1 DAY TO COMPILE */
    IF START_OVLY.SS > STOP_OVLY.SS
    THEN
       DO;  /* CARRY ONE MINUTE IF NECCESSARY */
          STOP_OVLY.SS = STOP_OVLY.SS + 60;
          STOP_OVLY.MM = STOP_OVLY.MM - 1;
       END;
    /* WE DON'T SAVE SECONDS, BUT ROUND TO THE NEAREST MINUTE */
    IF STOP_OVLY.SS - START_OVLY.SS >= 30
    THEN
       STOP_OVLY.MM = STOP_OVLY.MM + 1;
    IF START_OVLY.MM > STOP_OVLY.MM
    THEN
       DO;
          STOP_OVLY.MM = STOP_OVLY.MM + 60;
          STOP_OVLY.HH = STOP_OVLY.HH - 1;
       END;
    IF STOP_OVLY.HH < START_OVLY.HH
    THEN
       STOP_OVLY.HH = STOP_OVLY.HH + 24;
    DIFF_MINUTES = 60 * (STOP_OVLY.HH - START_OVLY.HH) +
                        (STOP_OVLY.MM - START_OVLY.MM);
    IF DIFF_MINUTES = 0
    THEN
       DIFF_MINUTES = 1;
    RETURN(DIFF_MINUTES);

 END SUBTRACT_TIME;

 DEFAULT RANGE(*) ALIGNED FIXED BINARY STATIC,
                  DESCRIPTORS ALIGNED;
 DECLARE (ABS,
          ADDR,
          ALLOCATION,
          ANY,
          BIT,
          BINARY,
          CHAR,
          COMPLETION,
          DATE,
          DATETIME,
          DIM,
          DECIMAL,
          EMPTY,
          FIXED,
          HBOUND,
          HIGH,
          INDEX,
          LBOUND,
          LENGTH,
          LINENO,
          LOW,
          MAX,
          MIN,
          MOD,
          NULL,
          ONCODE,
          ONKEY,
          PLIRETC,
          PLIRETV,
          PLISRTA,
          PLISRTB,
          PLISRTC,
          PLISRTD,
          REPEAT,
          ROUND,
          SAMEKEY,
          STATUS,
          STG,
          STORAGE,
          STRING,
          SUBSTR,
          TIME,
          TRANSLATE,
          TRUNC,
          UNSPEC,
          VERIFY)            BUILTIN;

  DECLARE HEX       ENTRY(FIXED BINARY(31)) RETURNS(CHAR(8)) EXTERNAL;

 /*******************************************************************
 *
 *   DECLARATION FOR THE LINK DATE INFORMATION BUILD BY THE LINKDATE
 *   PROGRAM AND LINKED WITH THIS PROGRAM.
 *
 *    LINKDTE IS A SPECIAL VARIABLE SET UP BY THE LINKDATE PROGRAM
 *    WHICH IS PART OF THE RELEASE PROCEDURE AND THE MDLKED CATALOGUED
 *    PROCEDURE.  THE LINKDATE PROGRAM GENERATES AN EXTERNAL VARIABLE
 *    NAMED LINKDTE WHICH CONTAINS THE CURRENT DATE IN MM/DD/YY FORMAT.
 *    NOTE: THAT WHEN USING LINKDTE YOU MUST ALWAYS INCLUDE THE
 *    ENTRY PLISTART CARD AS LINKDTE IS THE FIRST CSECT AND WOULD
 *    BECOME THE DEFAULT ENTRY POINT.
 *
 *********************************************************************/
    DECLARE  01  LINKDTE  STATIC EXTERNAL ALIGNED,
                 02    HEADER_JUNK    CHAR(8) INIT(' '),
                 02    LINK_DATE      VARYING CHAR(30) INIT('UNKNOWN');

    DECLARE  SAMPLER  ENTRY(FIXED BINARY(31),    /* COUNT OF SAMPLES */
                            FIXED BINARY(31),    /* COUNT OF STMTS   */
                            POINTER,             /* POINTER TO HEADER*/
                            FIXED BINARY(31),    /* TIMER INTERVAL   */
                            CHAR(4),             /* 'CPU ' OR 'REAL' */
                            CHAR(8),             /* LMOD NAME TO CALL*/
                            VARYING CHAR(*),     /* LMOD PARM        */
                            FIXED BINARY(31))    /* RETUNR CODE      */
                            EXTERNAL;
    DECLARE  STOPSAM  ENTRY(POINTER) EXTERNAL;
    DECLARE  GETSAMP      ENTRY EXTERNAL;
    DECLARE  GETSAMP_VAR  ENTRY VARIABLE AUTO INIT(GETSAMP);
    DECLARE  GETSAMP_BIN  FIXED BINARY(31) BASED(ADDR(GETSAMP_VAR));
    DECLARE  GETSAMP_LOC  CHAR(8) AUTO;

 END PLEA;
